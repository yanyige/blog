<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="http://jekyllrb.com" version="3.4.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-03-10T15:55:49+08:00</updated><id>http://localhost:4000/</id><title type="html">@YANYIGE</title><subtitle>欢迎来到我的个人博客，这里会更新关于我的一切~ 欢迎订阅！
</subtitle><entry><title type="html">jQuery源码分析 (第三部分)</title><link href="http://localhost:4000/2017/03/10/jQuery%E6%BA%90%E7%A0%81-%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86.html" rel="alternate" type="text/html" title="jQuery源码分析 (第三部分)" /><published>2017-03-10T00:00:00+08:00</published><updated>2017-03-10T00:00:00+08:00</updated><id>http://localhost:4000/2017/03/10/jQuery%E6%BA%90%E7%A0%81(%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86)</id><content type="html" xml:base="http://localhost:4000/2017/03/10/jQuery%E6%BA%90%E7%A0%81-%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86.html">&lt;h1 id=&quot;第三章-sizzle选择器&quot;&gt;第三章 Sizzle选择器&lt;/h1&gt;

&lt;p&gt;Sizzle 是一款纯JavaScript 实现的CSS 选择器引擎，它具有以下特性：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;完全独立，无库依赖。&lt;/li&gt;
  &lt;li&gt;相较于大多数常用选择器其性能非常有竞争力。&lt;/li&gt;
  &lt;li&gt;压缩和开启 gzip 后只有 4 KB。&lt;/li&gt;
  &lt;li&gt;具有高扩展性和易于使用的 API。&lt;/li&gt;
  &lt;li&gt;支持多种浏览器，如 IE 6.0+、Firefox 3.0+、Chrome 5+、Safari 3+、Opera 9+。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;W3C Selectors API 规范定义了方法querySelector()和querySelectorAll()，它们用于根据CSS选择器规范定位文档中的元素，但是老版本的浏览器（如IE6、IE7）不支持这两个方法。在Sizzle 内部，如果浏览器支持方法querySelectorAll()，则调用该方法查找元素，如果不支持，则模拟该方法的行为。&lt;/p&gt;

&lt;h2 id=&quot;31-总体结构&quot;&gt;3.1 总体结构&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(function(){
    // 选择器引擎入口，查找与选择器表达式 selector 匹配的元素集合
    var Sizzle = function( selector, context, results, seed ) { ... };
    // 工具方法，排序、去重
    Sizzle.uniqueSort = function( results ) { ... };
    // 便捷方法，使用指定的选择器表达式 expr 对元素集合 set 进行过滤
    Sizzle.matches = function( expr, set ) { ... };
    // 便捷方法，检查某个元素 node 是否匹配选择器表达式 expr
    Sizzle.matchesSelector = function( node, expr ) { ... };
    // 内部方法，对块表达式进行查找
    Sizzle.find = function( expr, context, isXML ) { ... };
    // 内部方法，用块表达式过滤元素集合
    Sizzle.filter = function( expr, set, inplace, not ) { ... };
    // 工具方法，抛出异常
    Sizzle.error = function( msg ) { ... };
    // 工具方法，获取 DOM 元素集合的文本内容
    var getText = Sizzle.getText = function( elem ) { ... };
    // 扩展方法和属性
    var Expr = Sizzle.selectors = {
    // 块表达式查找顺序
    order: [ &quot;ID&quot;, &quot;NAME&quot;, &quot;TAG&quot; ],
    // 正则表达式集，用于匹配和解析块表达式
    match: { ID, CLASS, NAME, ATTR, TAG, CHILD, POS, PSEUDO },
    leftMatch: { ... },
    // 属性名修正函数集
    attrMap: { &quot;class&quot;, &quot;for&quot; },
    // 属性值读取函数集
    attrHandle: { href, type },
    // 块间关系过滤函数集
    relative: { &quot;+&quot;, &quot;&amp;gt;&quot;, &quot;&quot;, &quot;~&quot; },
    // 块表达式查找函数集
    find: { ID, NAME, TAG },
    // 块表达式预过滤函数集
    preFilter: { CLASS, ID, TAG, CHILD, ATTR, PSEUDO, POS },
    // 伪类过滤函数集
    filters: { enabled, disabled, checked, selected, parent, empty, has, header,
    text, radio, checkbox, file, password, submit, image, reset, button, input,
    focus },
    // 位置伪类过滤函数集
    setFilters: { first, last, even, odd, lt, gt, nth, eq },
    // 块表达式过滤函数集
    filter: { PSEUDO, CHILD, ID, TAG, CLASS, ATTR, POS }
    };
    // 如果支持方法 querySelectorAll()，则调用该方法查找元素
    if ( document.querySelectorAll ) {
        (function(){
            var oldSizzle = Sizzle;
            Sizzle = function( query, context, extra, seed ) {
                // 尝试调用方法 querySelectorAll() 查找元素
                // 如果上下文是 document，则直接调用 querySelectorAll() 查找元素
                return makeArray( context.querySelectorAll(query ), extra );
                // 如果上下文是元素，则为选择器表达式增加上下文，然后调用querySelectorAll()
                // 查找元素
                return makeArray( context.querySelectorAll( &quot;[id='&quot; + nid + &quot;'] &quot; +
                query ), extra );
                // 如果查找失败，则仍然调用 oldSizzle()
                return oldSizzle(query, context, extra, seed);
            };
        })();
    }
    // 如果支持方法 matchesSelector()，则调用该方法检查元素是否匹配选择器表达式
    (function(){
        var matches = html.matchesSelector
        || html.mozMatchesSelector
        || html.webkitMatchesSelector
        || html.msMatchesSelector;
        // 如果支持方法 matchesSelector()
        if ( matches ) {
            Sizzle.matchesSelector = function( node, expr ) {
                // 尝试调用方法 matchesSelector()
                var ret = matches.call( node, expr );
                return ret;
                // 如果查找失败，则仍然调用 Sizzle()
                return Sizzle(expr, null, null, [node]).length &amp;gt; 0;
            };
        }
    })();
    // 检测浏览器是否支持 getElementsByClassName()
    (function(){
        Expr.order.splice(1, 0, &quot;CLASS&quot;);
        Expr.find.CLASS = function( match, context, isXML ) { ... };
    })();
    // 工具方法，检测元素 a 是否包含元素 b
    Sizzle.contains = function( a, b ) { ... };
})();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;32-选择器表达式&quot;&gt;3.2 选择器表达式&lt;/h2&gt;
&lt;p&gt;为了准确描述Sizzle 的实现，避免歧义，需要先约定一些相关术语，具体如下所示。&lt;/p&gt;

&lt;p&gt;序号 | 术语 | 说明和示例
—|—|—
1 | 选择器表达 | CSS 选择器表达式，例如，”div&amp;gt;p”
2 | 并列选择器表达 | 逗号分割的多个选择器表达式，例如，”div, p”
3 | 块表达式 | 例如，”div&amp;gt;p” 中的”div”、”p”
4 | 块表达式类型 | 例如，”div” 的类型是TAG，”.red” 的类型是CLASS，”div.red” 则是TAG +CLASS。共有8 种块表达式类型：ID、CLASS、NAME、ATTR、TAG、CHILD、POS、PSEUDO
5 | 块间关系符 | 表示块表达式之间关系的符号，例如，”div&amp;gt;p” 中的”&amp;gt;”。共有4 种块间关系符： “&amp;gt;” 父子关系、”” 祖先后代关系、”+” 紧挨着的兄弟元素、” ～ “ 之后的所有兄弟
元素&lt;/p&gt;

&lt;h2 id=&quot;33-设计思路&quot;&gt;3.3 设计思路&lt;/h2&gt;
&lt;p&gt;在正式开始分析Sizzle 的源码实现之前，先来讨论和分析下如果要执行一段选择器表达式，或者说设计一个简化版的选择器引擎，需要做些什么工作。下面以”div.red&amp;gt;p”为例来模拟执行过程，具体来说有从左向右查找和从右向左查找两种思路：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;1）从左向右：先查找”div.red” 匹配的元素集合，然后查找匹配”p” 的子元素集合。&lt;/li&gt;
  &lt;li&gt;2）从右向左：先查找”p”匹配的元素集合，然后检查其中每个元素的父元素是否匹配”div.red”。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sizzle，它是一款从右向左查找的选择器引擎，提供了与前面3个步骤相对应的核心接口：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;正则 chunker 负责从选择器表达式中提取块表达式和块间关系符。&lt;/li&gt;
  &lt;li&gt;方法 Sizzle.find( expr,context,isXML)负责查找块表达式匹配的元素集合，方法Sizzle.filter( expr, set, inplace, not ) 负责用块表达式过滤元素集合。&lt;/li&gt;
  &lt;li&gt;对象Sizzle.selector.relative中的块间关系过滤函数根据块间关系符过滤元素集合。函数Sizzle( selector, context, results, seed ) 则按照前面3 个步骤将这些核心接口组织起来。本节对选择器引擎和Sizzle的设计思路作了探索和概述，接下来看看Sizzle 的源码实现。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;34-sizzle-selector-context-results-seed-&quot;&gt;3.4 Sizzle( selector, context, results, seed )&lt;/h2&gt;
&lt;p&gt;函数Sizzle( selector, context, results, seed )用于查找与选择器表达式selector匹配的元素集合。该函数是选择器引擎的入口。&lt;/p&gt;

&lt;p&gt;函数Sizzle( selector, context, results, seed ) 执行的6个关键步骤如下：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;解析块表达式和块间关系符。&lt;/li&gt;
  &lt;li&gt;如果存在位置伪类，则从左向右查找：&lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;查找第一个块表达式匹配的元素集合，得到第一个上下文元素集合。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;遍历剩余的块表达式和块间关系符，不断缩小上下文元素集合。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;否则从右向左查找：&lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;查找最后一个块表达式匹配的元素集合，得到候选集、映射集。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;遍历剩余的块表达式和块间关系符，对映射集执行块间关系过滤。
根据映射集筛选候选集，将最终匹配的元素放入结果集。
如果存在并列选择器表达式，则递归调用Sizzle( selector, context, results, seed )查找匹配的元素集合，并合并、排序、去重。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;最后返回结果集。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;接下来是源码实现：&lt;/p&gt;

&lt;h3 id=&quot;1-定义sizzle-selector-context-results-seed-&quot;&gt;1. 定义Sizzle( selector, context, results, seed )&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;3879 var Sizzle = function( selector, context, results, seed ) {
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;参数 selector：CSS 选择器表达式。&lt;/li&gt;
  &lt;li&gt;参数context：DOM元素或文档对象，作为查找元素的上下文，用于限定查找范围。默认
值 是当前文档对象。&lt;/li&gt;
  &lt;li&gt;参数 results：可选的数组或类数组，函数 Sizzle( selector, context, results, seed ) 将把查找到的元素添加到其中。&lt;/li&gt;
  &lt;li&gt;参数seed：可选的元素集合，函数Sizzle( selector, context, results, seed )将从该元素集合中过滤出匹配选择器表达式的元素集合。&lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;2-修正参数resultscontext&quot;&gt;2. 修正参数results、context&lt;/h3&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;相关代码如下所示：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;3880 results = results || [];
3881 context = context || document;
3882
3883 var origContext = context;
3884
3885 if ( context.nodeType !== 1 &amp;amp;&amp;amp; context.nodeType !== 9 ) {
3886    return [];
3887 }
3888
3889 if ( !selector || typeof selector !== &quot;string&quot; ) {
3890    return results;
3891 }
3892
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;3-定义局部变量&quot;&gt;3. 定义局部变量&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;3893 var m, set, checkSet, extra, ret, cur, pop, i,
3894 prune = true,
3895 contextXML = Sizzle.isXML( context ),
3896 parts = [],
3897 soFar = selector;
3898
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;变量 m：用于存放正则 chunker 每次匹配选择器表达式 selector 的结果。&lt;/li&gt;
  &lt;li&gt;变量 set：在从右向左的查找方式中，变量set称为“候选集”，是最后一个块表达式匹配的元素集合，其他块表达式和块间关系符则会对候选集set 进行过滤；对于从左向右的查找方式，变量set 是当前块表达式匹配的元素集合，也是下一个块表达式的上下文。&lt;/li&gt;
  &lt;li&gt;变量 checkSet：对于从右向左的查找方式，变量 checkSet称为“映射集”，其初始值是候选集set 的副本，其他块表达式和块间关系符则会对映射集checkSet进行过滤，过滤时先根据块间关系符将其中的元素替换为父元素、祖先元素或兄弟元素，然后把与块表达式不匹配的元素替换为false，最后根据映射集checkSet 筛选候选集set；对于从右向左的查找方式，事实上在查找过程中并不涉及变量checkSet，只是在函数Sizzle() 的最后为了统一筛选和合并匹配元素的代码，将变量checkSet 与变量set 指向了同一个数组。&lt;/li&gt;
  &lt;li&gt;变量extra：用于存储选择器表达式中第一个逗号之后的其他并列选择器表达式。如果存在并列选择器表达式，则会递归调用函数Sizzle( selector, context, results, seed )查找匹配元素集合，并执行合并、排序和去重操作。&lt;/li&gt;
  &lt;li&gt;变量 ret ：只在从右向左执行方式中用到，用于存放查找器 Sizzle.find( expr,context,isXML ) 对最后一个块表达式的查找结果，格式为{ expr:“…”, set: array }。&lt;/li&gt;
  &lt;li&gt;变量 pop：只在从右向左的查找方式中用到，表示单个块表达式。&lt;/li&gt;
  &lt;li&gt;变量 prune：只在从右向左的查找方式中用到，表示候选集 set 是否需要筛选，默认为
true，表示需要筛选，如果选择器表达式中只有一个块表达式，则变量prune 为false。&lt;/li&gt;
  &lt;li&gt;变量 contextXML：表示上下文 context 是否是 XML 文档。&lt;/li&gt;
  &lt;li&gt;变量 parts：存放了正则 chunker 从选择器表达式中提取的块表达式和块间关系符。&lt;/li&gt;
  &lt;li&gt;变量soFar：用于保存正则chunker每次从选择器表达式中提取了块表达式或块间关系符后
的剩余部分，初始值为完整的选择器表达式。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;4-解析块表达式和块间关系符&quot;&gt;4. 解析块表达式和块间关系符&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;3860 var chunker = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['&quot;][^'&quot;]*['&quot;]|[^\[\]'&quot;]+)+\]|\\.|[^ &amp;gt;+~,(\[\\]+)+|[&amp;gt;+~])(\s*,\s*)?((?:.|\r|\n)*)/g,
3899 // Reset the position of the chunker regexp (start from head)
3900 do {
3901    chunker.exec( &quot;&quot; );
3902    m = chunker.exec( soFar );
3903    
3904    if ( m ) {
3905        soFar = m[3];
3906        
3907        parts.push( m[1] );
3908    
3909        if ( m[2] ) {
3910            extra = m[3];
3911            break;
3912        }
3913    }
3914 } while ( m );
3915
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">第三章 Sizzle选择器</summary></entry><entry><title type="html">培训课程(javascript高级编程1 3章)</title><link href="http://localhost:4000/2017/03/09/%E5%9F%B9%E8%AE%AD%E8%AF%BE%E7%A8%8B(Javascript%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B1-3%E7%AB%A0).html" rel="alternate" type="text/html" title="培训课程(javascript高级编程1 3章)" /><published>2017-03-09T00:00:00+08:00</published><updated>2017-03-09T00:00:00+08:00</updated><id>http://localhost:4000/2017/03/09/%E5%9F%B9%E8%AE%AD%E8%AF%BE%E7%A8%8B(Javascript%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B1-3%E7%AB%A0)</id><content type="html" xml:base="http://localhost:4000/2017/03/09/%E5%9F%B9%E8%AE%AD%E8%AF%BE%E7%A8%8B(Javascript%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B1-3%E7%AB%A0).html">&lt;h2 id=&quot;第一章-javascript简介&quot;&gt;第一章 Javascript简介&lt;/h2&gt;
&lt;h3 id=&quot;12-javascript实现&quot;&gt;1.2 Javascript实现&lt;/h3&gt;
&lt;p&gt;虽然Javascript和ECMAScript通常都被人们用来表达相同的含义，但是&lt;strong&gt;Javascript&lt;/strong&gt;的含义却比&lt;strong&gt;ECMA-262&lt;/strong&gt;（发音为”ek-ma-script”）中规定的要多的多。没错，Javascript实现应该由以下三个不同的部分组成。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;核心(ECMAScript)&lt;/li&gt;
  &lt;li&gt;文档对象模型(DOM)&lt;/li&gt;
  &lt;li&gt;浏览器对象模型(BOM)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;121-ecmascript&quot;&gt;1.2.1 ECMAScript&lt;/h4&gt;

&lt;p&gt;由ECMA-262 定义的ECMAScript 与Web 浏览器没有依赖关系。实际上，这门语言本身并不包含输
入和输出定义。&lt;/p&gt;

&lt;p&gt;ECMA-262 定义的只是这门语言的基础，而在此基础之上可以构建更完善的脚本语言。
我们常见的Web 浏览器只是ECMAScript 实现可能的宿主环境之一。&lt;/p&gt;

&lt;p&gt;宿主环境不仅提供基本的ECMAScript实现，同时也会提供该语言的扩展，以便语言与环境之间对接交互。&lt;/p&gt;

&lt;p&gt;而这些扩展——如DOM，则利用ECMAScript 的核心类型和语法提供更多更具体的功能，以便实现针对环境的操作。其他
宿主环境包括Node（一种服务端JavaScript 平台）和Adobe Flash。&lt;/p&gt;

&lt;p&gt;既然ECMA-262 标准没有参照Web 浏览器，那它都规定了些什么内容呢？大致说来，它规定了这
门语言的下列组成部分：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;语法&lt;/li&gt;
  &lt;li&gt;类型&lt;/li&gt;
  &lt;li&gt;语句&lt;/li&gt;
  &lt;li&gt;关键字&lt;/li&gt;
  &lt;li&gt;保留字&lt;/li&gt;
  &lt;li&gt;操作符
-对象&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;122-文档对象模型dom&quot;&gt;1.2.2 文档对象模型(DOM)&lt;/h4&gt;

&lt;p&gt;文档对象模型（DOM，Document Object Model）是针对XML 但经过扩展用于HTML 的应用程序编
程接口（API，Application Programming Interface）。&lt;/p&gt;

&lt;p&gt;DOM把整个页面映射为一个多层节点结构。HTML或XML页面中的每个组成部分都是某种类型的节点，这些节点又包含着不同类型的数据。&lt;/p&gt;

&lt;p&gt;看下面这个HTML 页面：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Sample Page&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello World!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在DOM 中，这个页面可以通过图1-2 所示的分层节点图表示。
通过DOM 创建的这个表示文档的树形图，开发人员获得了控制页面内容和结构的主动权。借助
DOM 提供的API，开发人员可以轻松自如地删除、添加、替换或修改任何节点。
&lt;img src=&quot;E:\YoudaoImg\dom.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;h5 id=&quot;dom级别&quot;&gt;DOM级别&lt;/h5&gt;

&lt;p&gt;DOM1 级（DOM Level 1）于1998 年10 月成为W3C 的推荐标准。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DOM1&lt;/strong&gt;级由两个模块组成：DOM核心（DOM Core）和DOM HTML。其中，DOM 核心规定的是如何映射基于XML 的文档结构，以便简化对文档中任意部分的访问和操作。DOM HTML 模块则在DOM 核心的基础上加以扩展，添加了针对HTML 的对象和方法。&lt;/p&gt;

&lt;p&gt;如果说DOM1 级的目标主要是映射文档的结构，那么DOM2 级的目标就要宽泛多了。&lt;br /&gt;
&lt;strong&gt;DOM2&lt;/strong&gt; 级在原来DOM 的基础上又扩充了（DHTML一直都支持的）鼠标和用户界面事件、范围、遍历（迭代DOM文档的方法）等细分模块，而且通过对象接口增加了对CSS（Cascading Style Sheets，层叠样式表）的支持。DOM1 级中的DOM核心模块也经过扩展开始支持XML 命名空间。&lt;/p&gt;

&lt;p&gt;DOM2 级引入了下列新模块，也给出了众多新类型和新接口的定义。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;DOM 视图（DOM Views）：定义了跟踪不同文档（例如，应用CSS 之前和之后的文档）视图的&lt;/li&gt;
  &lt;li&gt;接口；&lt;/li&gt;
  &lt;li&gt;DOM 事件（DOM Events）：定义了事件和事件处理的接口；&lt;/li&gt;
  &lt;li&gt;DOM 样式（DOM Style）：定义了基于CSS 为元素应用样式的接口；&lt;/li&gt;
  &lt;li&gt;DOM 遍历和范围（DOM Traversal and Range）：定义了遍历和操作文档树的接口。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;DOM3&lt;/strong&gt; 级则进一步扩展了DOM，引入了以统一方式加载和保存文档的方法——在DOM 加载和保
存（DOM Load and Save）模块中定义；新增了验证文档的方法——在DOM 验证（DOM Validation）模块中定义。DOM3 级也对DOM 核心进行了扩展，开始支持XML 1.0 规范，涉及XML Infoset、XPath和XML Base。&lt;/p&gt;

&lt;h4 id=&quot;123-浏览器对象模型bom&quot;&gt;1.2.3 浏览器对象模型(BOM)&lt;/h4&gt;
&lt;p&gt;Internet Explorer 3 和Netscape Navigator 有一个共同的特色，那就是支持可以访问和操作浏览器窗口的浏览器对象模型（BOM，Browser Object Model）。开发人员使用BOM 可以控制浏览器显示的页面以外的部分。而BOM真正与众不同的地方（也是经常会导致问题的地方），还是它作为JavaScript 实现
的一部分但却没有相关的标准。这个问题在HTML5 中得到了解决，HTML5 致力于把很多BOM 功能写
入正式规范。HTML5 发布后，很多关于BOM 的困惑烟消云散。
从根本上讲，BOM 只处理浏览器窗口和框架；但人们习惯上也把所有针对浏览器的JavaScript 扩展
算作BOM的一部分。下面就是一些这样的扩展：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;弹出新浏览器窗口的功能；&lt;/li&gt;
  &lt;li&gt;移动、缩放和关闭浏览器窗口的功能；&lt;/li&gt;
  &lt;li&gt;提供浏览器详细信息的navigator 对象；&lt;/li&gt;
  &lt;li&gt;提供浏览器所加载页面的详细信息的location 对象；&lt;/li&gt;
  &lt;li&gt;提供用户显示器分辨率详细信息的screen 对象；&lt;/li&gt;
  &lt;li&gt;对cookies 的支持；&lt;/li&gt;
  &lt;li&gt;像XMLHttpRequest 和IE 的ActiveXObject 这样的自定义对象。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;以上扩展，用代码如何实现？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;由于没有BOM标准可以遵循，因此每个浏览器都有自己的实现。虽然也存在一些事实标准，例如
要有window对象和navigator对象等，但每个浏览器都会为这两个对象乃至其他对象定义自己的属性和方法。现在有了HTML5，BOM实现的细节有望朝着兼容性越来越高的方向发展。第8章将深入讨论BOM。&lt;/p&gt;

&lt;h2 id=&quot;第二章-在html中使用javascript&quot;&gt;第二章 在HTML中使用Javascript&lt;/h2&gt;
&lt;h3 id=&quot;21-元素&quot;&gt;2.1 &lt;script&gt;元素&lt;/script&gt;&lt;/h3&gt;
&lt;p&gt;向HTML 页面中插入JavaScript 的主要方法，就是使用script元素。这个元素由Netscape创造
并在Netscape Navigator 2 中首先实现。后来，这个元素被加入到正式的HTML 规范中。HTML 4.01 为&lt;script&gt;定义了下列6 个属性。&lt;/script&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;async：可选。表示应该立即下载脚本，但不应妨碍页面中的其他操作，比如下载其他资源或等待加载其他脚本。只对外部脚本文件有效。&lt;/li&gt;
  &lt;li&gt;charset：可选。表示通过src 属性指定的代码的字符集。由于大多数浏览器会忽略它的值，因此这个属性很少有人用。&lt;/li&gt;
  &lt;li&gt;defer：可选。表示脚本可以延迟到文档完全被解析和显示之后再执行。只对外部脚本文件有效。IE7 及更早版本对嵌入脚本也支持这个属性。&lt;/li&gt;
  &lt;li&gt;language：已废弃。原来用于表示编写代码使用的脚本语言（如JavaScript、JavaScript1.2或VBScript）。大多数浏览器会忽略这个属性，因此也没有必要再用了。&lt;/li&gt;
  &lt;li&gt;src：可选。表示包含要执行代码的外部文件。&lt;/li&gt;
  &lt;li&gt;type：可选。可以看成是language的替代属性；表示编写代码使用的脚本语言的内容类型（也称为MIME 类型）。虽然text/javascript和text/ecmascript都已经不被推荐使用，但人们一直以来使用的都还是text/javascript。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;第三章-基本概念&quot;&gt;第三章 基本概念&lt;/h2&gt;
&lt;h3 id=&quot;31-语法&quot;&gt;3.1 语法&lt;/h3&gt;
&lt;p&gt;ECMAScript 的语法大量借鉴了C 及其他类C 语言（如Java 和Perl）的语法。因此，熟悉这些语言
的开发人员在接受ECMAScript 更加宽松的语法时，一定会有一种轻松自在的感觉。&lt;/p&gt;
&lt;h4 id=&quot;311-区分大小写&quot;&gt;3.1.1 区分大小写&lt;/h4&gt;
&lt;p&gt;要理解的第一个概念就是ECMAScript 中的一切（变量、函数名和操作符）都区分大小写。这也就
意味着，变量名test 和变量名Test 分别表示两个不同的变量，而函数名不能使用typeof，因为它
是一个关键字（3.2 节介绍关键字），但typeOf 则完全可以是一个有效的函数名。&lt;/p&gt;
&lt;h4 id=&quot;312-标识符&quot;&gt;3.1.2 标识符&lt;/h4&gt;
&lt;p&gt;所谓标识符，就是指变量、函数、属性的名字，或者函数的参数。标识符可以是按照下列格式规则
组合起来的一或多个字符：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;第一个字符必须是一个字母、下划线（_）或一个美元符号（$）；&lt;/li&gt;
  &lt;li&gt;其他字符可以是字母、下划线、美元符号或数字。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;标识符中的字母也可以包含扩展的ASCII 或Unicode 字母字符（如À和Æ），但我们不推荐这样做。
按照惯例，ECMAScript 标识符采用驼峰大小写格式，也就是第一个字母小写，剩下的每个单词的
首字母大写，例如：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;firstSecond&lt;/li&gt;
  &lt;li&gt;myCar&lt;/li&gt;
  &lt;li&gt;doSomethingImportant&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;虽然没有谁强制要求必须采用这种格式，但为了与ECMAScript 内置的函数和对象命名格式保持一
致，可以将其当作一种最佳实践。&lt;/p&gt;
&lt;h4 id=&quot;313-注释&quot;&gt;3.1.3 注释&lt;/h4&gt;
&lt;p&gt;ECMAScript 使用C 风格的注释，包括单行注释和块级注释。单行注释以两个斜杠开头，如下所示：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 单行注释
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;块级注释以一个斜杠和一个星号（/&lt;em&gt;）开头，以一个星号和一个斜杠（&lt;/em&gt;/）结尾，如下所示：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/*
* 这是一个多行
* （块级）注释
*/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;314-严格模式&quot;&gt;3.1.4 严格模式&lt;/h4&gt;
&lt;p&gt;ECMAScript 5 引入了严格模式（strict mode）的概念。严格模式是为JavaScript定义了一种不同的解析与执行模型。在严格模式下，ECMAScript 3中的一些不确定的行为将得到处理，而且对某些不安全的操作也会抛出错误。要在整个脚本中启用严格模式，可以在顶部添加如下代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;use strict&quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;314-语句&quot;&gt;3.1.4 语句&lt;/h4&gt;
&lt;p&gt;ECMAScript 中的语句以一个分号结尾；如果省略分号，则由解析器确定语句的结尾，如下例所示：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var sum = a + b // 即使没有分号也是有效的语句——不推荐
var diff = a - b; // 有效的语句——推荐
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;虽然语句结尾的分号不是必需的，但我们建议任何时候都不要省略它。因为加上这个分号可以避免
很多错误（例如不完整的输入），开发人员也可以放心地通过删除多余的空格来压缩ECMAScript 代码（代
码行结尾处没有分号会导致压缩错误）。另外，加上分号也会在某些情况下增进代码的性能，因为这样
解析器就不必再花时间推测应该在哪里插入分号了&lt;/p&gt;

&lt;h3 id=&quot;32-关键字和保留字&quot;&gt;3.2 关键字和保留字&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;break&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;do&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;instanceof&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;typeof&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;case&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;else&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;new&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;var&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;catch&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;finally&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;return&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;void&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;continue&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;for&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;switch&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;while&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;debugger&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;function&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;this&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;with&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;default&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;if&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;throw&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;delete&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;in&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;try&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;33-变量&quot;&gt;3.3 变量&lt;/h3&gt;
&lt;p&gt;ECMAScript 的变量是松散类型的，所谓松散类型就是可以用来保存任何类型的数据。换句话说，
每个变量仅仅是一个用于保存值的占位符而已。定义变量时要使用var 操作符（注意var 是一个关键
字），后跟变量名（即一个标识符），如下所示：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var message;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这行代码定义了一个名为message 的变量，该变量可以用来保存任何值（像这样未经过初始化的
变量，会保存一个特殊的值——undefined，相关内容将在3.4 节讨论）。ECMAScript 也支持直接初始
化变量，因此在定义变量的同时就可以设置变量的值，如下所示：
var message = “hi”;
在此，变量message 中保存了一个字符串值”hi”。像这样初始化变量并不会把它标记为字符串类型；
初始化的过程就是给变量赋一个值那么简单。因此，可以在修改变量值的同时修改值的类型，如下所示：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var message = &quot;hi&quot;;
message = 100; // 有效，但不推荐
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在这个例子中，变量message 一开始保存了一个字符串值”hi”，然后该值又被一个数字值100 取
代。虽然我们不建议修改变量所保存值的类型，但这种操作在ECMAScript 中完全有效。
有一点必须注意，即用var 操作符定义的变量将成为定义该变量的作用域中的局部变量。也就是说，
如果在函数中使用var 定义一个变量，那么这个变量在函数退出后就会被销毁，例如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function test(){
var message = &quot;hi&quot;; // 局部变量
}
test();
alert(message); // 错误！
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这里，变量message 是在函数中使用var 定义的。当函数被调用时，就会创建该变量并为其赋值。
而在此之后，这个变量又会立即被销毁，因此例子中的下一行代码就会导致错误。不过，可以像下面这样省略var 操作符，从而创建一个全局变量：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function test(){
message = &quot;hi&quot;; // 全局变量
}
test();
alert(message); // &quot;hi&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这个例子省略了var 操作符，因而message 就成了全局变量。这样，只要调用过一次test()函
数，这个变量就有了定义，就可以在函数外部的任何地方被访问到。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;思考一下，这是为什么呢？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;34-数据类型&quot;&gt;3.4 数据类型&lt;/h3&gt;
&lt;p&gt;ECMAScript 中有5 种简单数据类型（也称为基本数据类型）：Undefined、Null、Boolean、Number
和String。&lt;/p&gt;

&lt;p&gt;还有1 种复杂数据类型——Object，Object 本质上是由一组无序的名值对组成的。&lt;/p&gt;

&lt;p&gt;ECMAScript不支持任何创建自定义类型的机制，而所有值最终都将是上述6 种数据类型之一。乍一看，好像只有6种数据类型不足以表示所有数据；但是，由于ECMAScript 数据类型具有动态性，因此的确没有再定义其他数据类型的必要了。&lt;/p&gt;

&lt;h4 id=&quot;341-typeof操作符&quot;&gt;3.4.1 typeof操作符&lt;/h4&gt;

&lt;p&gt;鉴于ECMAScript 是松散类型的，因此需要有一种手段来检测给定变量的数据类型——typeof 就
是负责提供这方面信息的操作符。对一个值使用typeof 操作符可能返回下列某个字符串：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;“undefined”——如果这个值未定义；&lt;/li&gt;
  &lt;li&gt;“boolean”——如果这个值是布尔值；&lt;/li&gt;
  &lt;li&gt;“string”——如果这个值是字符串；&lt;/li&gt;
  &lt;li&gt;“number”——如果这个值是数值；&lt;/li&gt;
  &lt;li&gt;“object”——如果这个值是对象或null；&lt;/li&gt;
  &lt;li&gt;“function”——如果这个值是函数。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;有些时候，typeof 操作符会返回一些令人迷惑但技术上却正确的值。比如，调用typeof null会返回”object”，因为特殊值null 被认为是一个空的对象引用。Safari 5 及之前版本、Chrome 7 及之前版本在对正则表达式调用typeof操作符时会返回”function”，而其他浏览器在这种情况下会返回”object”。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;342-undefined类型&quot;&gt;3.4.2 Undefined类型&lt;/h4&gt;
&lt;p&gt;Undefined 类型只有一个值，即特殊的undefined。在使用var 声明变量但未对其加以初始化时，
这个变量的值就是undefined，例如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var message;
alert(message == undefined); //true
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这个例子只声明了变量message，但未对其进行初始化。比较这个变量与undefined 字面量，结
果表明它们是相等的。这个例子与下面的例子是等价的：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var message = undefined;
alert(message == undefined); //true
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这个例子使用undefined 值显式初始化了变量message。但我们没有必要这么做，因为未经初始
化的值默认就会取得undefined 值。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;一般而言，不存在需要显式地把一个变量设置为undefined 值的情况。字面值
undefined 的主要目的是用于比较，而ECMA-262 第3 版之前的版本中并没有规定
这个值。第3 版引入这个值是为了正式区分空对象指针与未经初始化的变量。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;不过，包含undefined 值的变量与尚未定义的变量还是不一样的。看看下面这个例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var message; // 这个变量声明之后默认取得了undefined 值
// 下面这个变量并没有声明
// var age
alert(message); // &quot;undefined&quot;
alert(age); // 产生错误
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;运行以上代码，第一个警告框会显示变量message的值，即”undefined”。而第二个警告框——
由于传递给alert()函数的是尚未声明的变量age——则会导致一个错误。对于尚未声明过的变量，只能执行一项操作，即使用typeof 操作符检测其数据类型（对未经声明的变量调用delete 不会导致错误，但这样做没什么实际意义，而且在严格模式下确实会导致错误）。&lt;/p&gt;

&lt;p&gt;然而，令人困惑的是：对未初始化的变量执行typeof 操作符会返回undefined 值，而对未声明
的变量执行typeof 操作符同样也会返回undefined 值。来看下面的例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var message; // 这个变量声明之后默认取得了undefined 值
// 下面这个变量并没有声明
// var age
alert(typeof message); // &quot;undefined&quot;
alert(typeof age); // &quot;undefined&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;即便未初始化的变量会自动被赋予undefined 值，但显式地初始化变量依然是
明智的选择。如果能够做到这一点，那么当typeof 操作符返回”undefined”值时，
我们就知道被检测的变量还没有被声明，而不是尚未初始化。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;343-null类型&quot;&gt;3.4.3 Null类型&lt;/h4&gt;
&lt;p&gt;Null 类型是第二个只有一个值的数据类型，这个特殊的值是null。从逻辑角度来看，null值表示一个空对象指针，而这也正是使用typeof 操作符检测null 值时会返回”object”的原因，如下面
的例子所示：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var car = null;
alert(typeof car); // &quot;object&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;实际上，undefined 值是派生自null 值的，因此ECMA-262 规定对它们的相等性测试要返回true：&lt;/p&gt;

&lt;h4 id=&quot;344-boolean类型&quot;&gt;3.4.4 Boolean类型&lt;/h4&gt;
&lt;p&gt;Boolean 类型是ECMAScript 中使用得最多的一种类型，该类型只有两个字面值：true 和false。
这两个值与数字值不是一回事，因此true不一定等于1，而false也不一定等于0。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;小问题： -1转化成Boolean，是true还是false？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;转换规则&quot;&gt;转换规则&lt;/h5&gt;
&lt;p&gt;| 数据类型     | 转换为true的值      |  转换为false的值  |
|:————:|:——————-:|:—————–:|
| Boolean      | true                | false             |
| String       | 任何非空字符串      | “”                |
| Number       | 任何非零数字值      | 0和NaN            |
| Object       | 任何对象            | null              |
| Undefined    | n/a                 | undefined         |&lt;/p&gt;

&lt;h4 id=&quot;345-number类型&quot;&gt;3.4.5 Number类型&lt;/h4&gt;
&lt;p&gt;Number 类型应该是ECMAScript 中最令人关注的数据类型了，这种类型使用IEEE754 格式来表示
整数和浮点数值（浮点数值在某些语言中也被称为双精度数值）。为支持各种数值类型，ECMA-262 定
义了不同的数值字面量格式。&lt;/p&gt;

&lt;p&gt;最基本的数值字面量格式是十进制整数，十进制整数可以像下面这样直接在代码中输入：
var intNum = 55; // 整数
除了以十进制表示外，整数还可以通过八进制（以8 为基数）或十六进制（以16 为基数）的字面值
来表示。&lt;/p&gt;

&lt;p&gt;其中，八进制字面值的第一位必须是零（0），然后是八进制数字序列（0～7）。如果字面值中的
数值超出了范围，那么前导零将被忽略，后面的数值将被当作十进制数值解析。请看下面的例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. var octalNum1 = 070; // 八进制的56
2. var octalNum2 = 079; // 无效的八进制数值——解析为79
3. var octalNum3 = 08; // 无效的八进制数值——解析为8
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;八进制字面量在严格模式下是无效的，会导致支持的JavaScript 引擎抛出错误。
十六进制字面值的前两位必须是0x，后跟任何十六进制数字（0～9 及A～F）。其中，字母A～F
可以大写，也可以小写。如下面的例子所示：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. var hexNum1 = 0xA; // 十六进制的10
2. var hexNum2 = 0x1f; // 十六进制的31
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在进行算术计算时，所有以八进制和十六进制表示的数值最终都将被转换成十进制数值。&lt;/p&gt;

&lt;h5 id=&quot;1-浮点数值&quot;&gt;1. 浮点数值&lt;/h5&gt;
&lt;p&gt;所谓浮点数值，就是该数值中必须包含一个小数点，并且小数点后面必须至少有一位数字。虽然小
数点前面可以没有整数，但我们不推荐这种写法。以下是浮点数值的几个例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var floatNum1 = 1.1;
var floatNum2 = 0.1;
var floatNum3 = .1; // 有效，但不推荐
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;浮点数值的最高精度是17 位小数，但在进行算术计算时其精确度远远不如整数。例如，0.1 加0.2
的结果不是0.3，而是&lt;strong&gt;0.30000000000000004&lt;/strong&gt;。这个小小的舍入误差会导致无法测试特定的浮点数值。&lt;br /&gt;
例如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (a + b == 0.3){ // 不要做这样的测试！
alert(&quot;You got 0.3.&quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在这个例子中，我们测试的是两个数的和是不是等于0.3。如果这两个数是0.05 和0.25，或者是0.15
和0.15 都不会有问题。而如前所述，如果这两个数是0.1 和0.2，那么测试将无法通过。因此，永远&lt;strong&gt;不要&lt;/strong&gt;++测试某个特定的浮点数值++。&lt;/p&gt;

&lt;h4 id=&quot;2-数值范围&quot;&gt;2. 数值范围&lt;/h4&gt;
&lt;p&gt;由于内存的限制，ECMAScript 并不能保存世界上所有的数值。ECMAScript 能够表示的最小数值保存在Number.MIN_VALUE中——在大多数浏览器中，这个值是5e-324；能够表示的最大数值保存在Number.MAX_VALUE中——在大多数浏览器中，这个值是1.7976931348623157e+308。如果某次计算的结果得到了一个超出JavaScript数值范围的值，那么这个数值将被自动转换成特殊的Infinity值。具体来说，如果这个数值是负数，则会被转换成-Infinity（负无穷），如果这个数值是正，则会被转换成Infinity（正无穷）。&lt;/p&gt;

&lt;p&gt;如上所述，如果某次计算返回了正或负的Infinity 值，那么该值将无法继续参与下一次的计算，
因为Infinity 不是能够参与计算的数值。要想确定一个数值是不是有穷的（换句话说，是不是位于最
小和最大的数值之间），可以使用isFinite()函数。这个函数在参数位于最小与最大数值之间时会返
回true，如下面的例子所示：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var result = Number.MAX_VALUE + Number.MAX_VALUE;
alert(isFinite(result)); //false
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;尽管在计算中很少出现某些值超出表示范围的情况，但在执行极小或极大数值的计算时，检测监控
这些值是可能的，也是必需的。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;访问Number.NEGATIVE_INFINITY 和Number.POSITIVE_INFINITY 也可以
得到负和正Infinity 的值。可以想见，这两个属性中分别保存着-Infinity 和
Infinity&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;那么问题来了，Number.NEGATIVE_INFINITY 和Number.POSITIVE_INFINITY 这两个值分别保存在哪里？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;3-nan&quot;&gt;3. NaN&lt;/h4&gt;
&lt;p&gt;NaN，即非数值（Not a Number）是一个特殊的数值，这个数值用于表示一个本来要返回数值的操作数
未返回数值的情况（这样就不会抛出错误了）。例如，在其他编程语言中，任何数值除以0都会导致错误，从而停止代码执行。但在ECMAScript中，任何数值除以0会返回NaN，因此不会影响其他代码的执行。&lt;/p&gt;

&lt;p&gt;NaN 本身有两个非同寻常的特点。首先，任何涉及NaN 的操作（例如NaN/10）都会返回NaN，这个特点在多步计算中有可能导致问题。其次，NaN与任何值都不相等，包括NaN 本身。例如，下面的代码会返回false：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alert(NaN == NaN); //false
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;针对NaN 的这两个特点，ECMAScript 定义了isNaN()函数。这个函数接受一个参数，该参数可以
是任何类型，而函数会帮我们确定这个参数是否“不是数值”。isNaN()在接收到一个值之后，会尝试
将这个值转换为数值。某些不是数值的值会直接转换为数值，例如字符串”10”或Boolean 值。而任何
不能被转换为数值的值都会导致这个函数返回true。请看下面的例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alert(isNaN(NaN)); //true
alert(isNaN(10)); //false（10 是一个数值）
alert(isNaN(&quot;10&quot;)); //false（可以被转换成数值10）
alert(isNaN(&quot;blue&quot;)); //true（不能转换成数值）
alert(isNaN(true)); //false（可以被转换成数值1）
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;4-数值转换&quot;&gt;4. 数值转换&lt;/h4&gt;
&lt;p&gt;有3 个函数可以把非数值转换为数值：Number()、parseInt()和parseFloat()。第一个函数，即转型函数Number()可以用于任何数据类型，而另两个函数则专门用于把字符串转换成数值。这3个函数对于同样的输入会有返回不同的结果。
&lt;strong&gt;Number&lt;/strong&gt;()函数的转换规则如下。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;如果是Boolean 值，true 和false 将分别被转换为1 和0。&lt;/li&gt;
  &lt;li&gt;如果是数字值，只是简单的传入和返回。&lt;/li&gt;
  &lt;li&gt;如果是null 值，返回0。&lt;/li&gt;
  &lt;li&gt;如果是undefined，返回NaN。&lt;/li&gt;
  &lt;li&gt;如果是字符串，遵循下列规则：&lt;/li&gt;
  &lt;li&gt;如果字符串中只包含数字（包括前面带正号或负号的情况），则将其转换为十进制数值，即”1”&lt;/li&gt;
  &lt;li&gt;会变成1，”123”会变成123，而”011”会变成11（注意：前导的零被忽略了）；&lt;/li&gt;
  &lt;li&gt;如果字符串中包含有效的浮点格式，如”1.1”，则将其转换为对应的浮点数值（同样，也会忽略前导零）；&lt;/li&gt;
  &lt;li&gt;如果字符串中包含有效的十六进制格式，例如”0xf”，则将其转换为相同大小的十进制整数值；&lt;/li&gt;
  &lt;li&gt;如果字符串是空的（不包含任何字符），则将其转换为0；&lt;/li&gt;
  &lt;li&gt;如果字符串中包含除上述格式之外的字符，则将其转换为NaN。&lt;/li&gt;
  &lt;li&gt;如果是对象，则调用对象的valueOf()方法，然后依照前面的规则转换返回的值。如果转换的结果是NaN，则调用对象的toString()方法，然后再次依照前面的规则转换返回的字符串值。
根据这么多的规则使用Number()把各种数据类型转换为数值确实有点复杂。下面还是给出几个具
体的例子吧。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var num1 = Number(&quot;Hello world!&quot;);
var num2 = Number(&quot;&quot;); 
var num3 = Number(&quot;000011&quot;); 
var num4 = Number(true); 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;一元加操作符（3.5.1 节将介绍）的操作与Number()函数相同。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;由于Number()函数在转换字符串时比较复杂而且不够合理，因此在处理整数的时候更常用的是parseInt()函数。parseInt()函数在转换字符串时，更多的是看其是否符合数值模式。它会忽略字符串前面的空格，直至找到第一个非空格字符。如果第一个字符不是数字字符或者负号，parseInt()就会返回NaN；也就是说，用parseInt()转换空字符串会返回NaN（Number()对空字符返回0）。如果第一个字符是数字字符，parseInt()会继续解析第二个字符，直到解析完所有后续字符或者遇到了一个非数字字符。例如，”1234blue”会被转换为1234，因为”blue”会被完全忽略。类似地，”22.5”会被转换为22，因为小数点并不是有效的数字字符。&lt;/p&gt;

&lt;p&gt;如果字符串中的第一个字符是数字字符，parseInt()也能够识别出各种整数格式（即前面讨论的
十进制、八进制和十六进制数）。也就是说，如果字符串以”0x”开头且后跟数字字符，就会将其当作一
个十六进制整数；如果字符串以”0”开头且后跟数字字符，则会将其当作一个八进制数来解析。
为了更好地理解parseInt()函数的转换规则，下面给出一些例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var num1 = parseInt(&quot;1234blue&quot;); 
var num2 = parseInt(&quot;&quot;); 
var num3 = parseInt(&quot;0xA&quot;); 
var num4 = parseInt(22.5); 
var num5 = parseInt(&quot;070&quot;); 
var num6 = parseInt(&quot;70&quot;); 
var num7 = parseInt(&quot;0xf&quot;); 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;在使用parseInt()解析像八进制字面量的字符串时，ECMAScript 3 和5 存在分歧。例如：
//ECMAScript 3 认为是56（八进制），ECMAScript 5 认为是70（十进制）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;为了消除在使用parseInt()函数时可能导致的上述困惑，可以为这个函数提供第二个参数：转换
时使用的基数（即多少进制）。如果知道要解析的值是十六进制格式的字符串，那么指定基数16 作为第
二个参数，可以保证得到正确的结果，例如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var num = parseInt(&quot;0xAF&quot;, 16); //175
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;实际上，如果指定了16 作为第二个参数，字符串可以不带前面的”0x”，如下所示：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var num1 = parseInt(&quot;AF&quot;, 16); 
var num2 = parseInt(&quot;AF&quot;); 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;346-string类型&quot;&gt;3.4.6 String类型&lt;/h4&gt;
&lt;p&gt;String 类型用于表示由零或多个16 位Unicode 字符组成的字符序列，即字符串。字符串可以由双
引号（”）或单引号（’）表示，因此下面两种字符串的写法都是有效的：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var firstName = &quot;Nicholas&quot;;
var lastName = 'Zakas';
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;与PHP 中的双引号和单引号会影响对字符串的解释方式不同，ECMAScript 中的这两种语法形式没
有什么区别。用双引号表示的字符串和用单引号表示的字符串完全相同。不过，以双引号开头的字符串也必须以双引号结尾，而以单引号开头的字符串必须以单引号结尾。例如，下面这种字符串表示法会导
致语法错误：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var firstName = 'Nicholas&quot;; // 语法错误（左右引号必须匹配）
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id=&quot;1-字符字面量&quot;&gt;1. 字符字面量&lt;/h5&gt;
&lt;p&gt;String 数据类型包含一些特殊的字符字面量，也叫转义序列，用于表示非打印字符，或者具有其
他用途的字符。这些字符字面量如下表所示：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;\n 换行&lt;/li&gt;
  &lt;li&gt;\t 制表&lt;/li&gt;
  &lt;li&gt;\b 空格&lt;/li&gt;
  &lt;li&gt;\r 回车&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些字符字面量可以出现在字符串中的任意位置，而且也将被作为一个字符来解析，如下面的例子所示：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var text = &quot;This is the letter sigma: \u03a3.&quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这个例子中的变量text 有28 个字符，其中6 个字符长的转义序列表示1个字符。
任何字符串的长度都可以通过访问其length 属性取得，例如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alert(text.length); // 输出28
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这个属性返回的字符数包括16 位字符的数目。如果字符串中包含双字节字符，那么length属性
可能不会精确地返回字符串中的字符数目。&lt;/p&gt;
&lt;h5 id=&quot;2-字符串的特点&quot;&gt;2. 字符串的特点&lt;/h5&gt;
&lt;p&gt;ECMAScript 中的字符串是不可变的，也就是说，字符串一旦创建，它们的值就不能改变。要改变
某个变量保存的字符串，首先要销毁原来的字符串，然后再用另一个包含新值的字符串填充该变量，
例如：
var lang = “Java”;
lang = lang + “Script”;
以上示例中的变量lang 开始时包含字符串”Java”。而第二行代码把lang 的值重新定义为”Java”与”Script”的组合，即”JavaScript”。实现这个操作的过程如下：首先创建个能容纳10 个字符的新字符串，然后在这个字符串中填充”Java”和”Script”，最后一步是销毁原来的字符串”Java”和字符串”Script”，因为这两个字符串已经没用了。这个过程是在后台发生的，而这也在某些旧版本的浏览器（例如版本低于1.0 的Firefox、IE6等）中拼接字符串时速度很慢的原因所在。但这些浏览器后来的版本已经解决了这个低效率问题。&lt;/p&gt;

&lt;h5 id=&quot;3-转换为字符串&quot;&gt;3. 转换为字符串&lt;/h5&gt;
&lt;p&gt;要把一个值转换为一个字符串有两种方式。第一种是使用几乎每个值都有的toString()方法（第5 章将讨论这个方法的特点）。这个方法唯一要做的就是返回相应值的字符串表现。来看下面的例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var age = 11;
var ageAsString = age.toString(); // 字符串&quot;11&quot;
var found = true;
var foundAsString = found.toString(); // 字符串&quot;true&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;数值、布尔值、对象和字符串值（没错，每个字符串也都有一个toString()方法，该方法返回字
符串的一个副本）都有toString()方法。但null 和undefined 值没有这个方法。
多数情况下，调用toString()方法不必传递参数。但是，在调用数值的toString()方法时，可
以传递一个参数：输出数值的基数。默认情况下，toString()方法以十进制格式返回数值的字符串表
示。而通过传递基数，toString()可以输出以二进制、八进制、十六进制，乃至其他任意有效进制格
式表示的字符串值。下面给出几个例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var num = 10;
alert(num.toString()); // &quot;10&quot;
alert(num.toString(2)); // &quot;1010&quot;
alert(num.toString(8)); // &quot;12&quot;
alert(num.toString(10)); // &quot;10&quot;
alert(num.toString(16)); // &quot;a&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在不知道要转换的值是不是null 或undefined 的情况下，还可以使用转型函数String()，这个
函数能够将任何类型的值转换为字符串。String()函数遵循下列转换规则：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;如果值有toString()方法，则调用该方法（没有参数）并返回相应的结果；&lt;/li&gt;
  &lt;li&gt;如果值是null，则返回”null”；&lt;/li&gt;
  &lt;li&gt;如果值是undefined，则返回”undefined”。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面再看几个例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var value1 = 10;
var value2 = true;
var value3 = null;
var value4;
alert(String(value1)); // &quot;10&quot;
alert(String(value2)); // &quot;true&quot;
alert(String(value3)); // &quot;null&quot;
alert(String(value4)); // &quot;undefined&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这里先后转换了4 个值：数值、布尔值、null 和undefined。数值和布尔值的转换结果与调用toString()方法得到的结果相同。因为null和undefined 没有toString()方法，所以String()函数就返回了这两个值的字面量。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;要把某个值转换为字符串，可以使用加号操作符（3.5 节讨论）把它与一个字符
串（”“）加在一起。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;347-object类型&quot;&gt;3.4.7 Object类型&lt;/h4&gt;
&lt;p&gt;ECMAScript 中的对象其实就是一组数据和功能的集合。对象可以通过执行new 操作符后跟要创建
的对象类型的名称来创建。而创建Object 类型的实例并为其添加属性和（或）方法，就可以创建自定
义对象，如下所示：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var o = new Object();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这个语法与Java 中创建对象的语法相似；但在ECMAScript 中，如果不给构造函数传递参数，则可
以省略后面的那一对圆括号。也就是说，在像前面这个示例一样不传递参数的情况下，完全可以省略那
对圆括号（但这不是推荐的做法）：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var o = new Object; // 有效，但不推荐省略圆括号
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;仅仅创建Object 的实例并没有什么用处，但关键是要理解一个重要的思想：即在ECMAScript 中，
（就像Java 中的java.lang.Object 对象一样）Object 类型是所有它的实例的基础。换句话说，
Object 类型所具有的任何属性和方法也同样存在于更具体的对象中。&lt;br /&gt;
Object 的每个实例都具有下列属性和方法。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;constructor：保存着用于创建当前对象的函数。对于前面的例子而言，构造函数（constructor）就是Object()。&lt;/li&gt;
  &lt;li&gt;hasOwnProperty(propertyName)：用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中，作为参数的属性名（propertyName）必须以字符串形式指定（例如：o.hasOwnProperty(“name”)）。&lt;/li&gt;
  &lt;li&gt;isPrototypeOf(object)：用于检查传入的对象是否是传入对象的原型（第5 章将讨论原型）。&lt;/li&gt;
  &lt;li&gt;propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for-in 语句（本章后面将会讨论）来枚举。与hasOwnProperty()方法一样，作为参数的属性名必须以字符串形式指定。&lt;/li&gt;
  &lt;li&gt;toLocaleString()：返回对象的字符串表示，该字符串与执行环境的地区对应。&lt;/li&gt;
  &lt;li&gt;toString()：返回对象的字符串表示。&lt;/li&gt;
  &lt;li&gt;valueOf()：返回对象的字符串、数值或布尔值表示。通常与toString()方法的返回值相同。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;由于在ECMAScript 中Object 是所有对象的基础，因此所有对象都具有这些基本的属性和方法。
第5 章和第6 章将详细介绍Object 与其他对象的关系。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;35-操作符&quot;&gt;3.5 操作符&lt;/h3&gt;

&lt;h4 id=&quot;351-一元操作符&quot;&gt;3.5.1 一元操作符&lt;/h4&gt;
&lt;h5 id=&quot;1-递增和递减操作符&quot;&gt;1. 递增和递减操作符&lt;/h5&gt;
&lt;p&gt;++和–
考虑如下代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var age = 29;
var anotherAge = --age + 2;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var age = 29;
var anotherAge = age-- + 2;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;2-一元加和减操作符&quot;&gt;2. 一元加和减操作符&lt;/h5&gt;
&lt;p&gt;绝大多数开发人员对一元加和减操作符都不会陌生，而且这两个ECMAScript 操作符的作用与数学
书上讲的完全一样。一元加操作符以一个加号（+）表示，放在数值前面，对数值不会产生任何影响，
如下面的例子所示：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var num = 25;
num = +num; // 仍然是25
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;不过，在对非数值应用一元加操作符时，该操作符会像Number()转型函数一样对这个值执行转换。
换句话说，布尔值false 和true 将被转换为0 和1，字符串值会被按照一组特殊的规则进行解析，而
对象是先调用它们的valueOf()和（或）toString()方法，再转换得到的值。
下面的例子展示了对不同数据类型应用一元加操作符的结果：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var s1 = &quot;01&quot;;
var s2 = &quot;1.1&quot;;
var s3 = &quot;z&quot;;
var b = false;
var f = 1.1;
var o = {
valueOf: function() {
return -1;
}
};
s1 = +s1; // 值变成数值1
s2 = +s2; // 值变成数值1.1
s3 = +s3; // 值变成NaN
b = +b; // 值变成数值0
f = +f; // 值未变，仍然是1.1
o = +o; // 值变成数值-1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;352-位操作符&quot;&gt;3.5.2 位操作符&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;~&lt;/li&gt;
  &lt;li&gt;&amp;amp;&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;x\^y==y\^x, &lt;br /&gt;
(x\^y)\^z == x\^(y\^z), &lt;br /&gt;
x^x == 0, &lt;br /&gt;
x^0 == x&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;使用位运算交换两个值，如何交换？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&amp;gt;&amp;gt;&lt;/li&gt;
  &lt;li&gt;«&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;353-布尔操作符&quot;&gt;3.5.3 布尔操作符&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;!&lt;/li&gt;
  &lt;li&gt;&amp;amp;&amp;amp;&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt; &lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;354-乘性操作符&quot;&gt;3.5.4 乘性操作符&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;\/
    &lt;h4 id=&quot;355-加性操作符&quot;&gt;3.5.5 加性操作符&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;-
    &lt;h4 id=&quot;356-关系操作符&quot;&gt;3.5.6 关系操作符&lt;/h4&gt;
    &lt;p&gt;&amp;gt; &amp;lt; &amp;gt;= &amp;lt;=&lt;/p&gt;
    &lt;h4 id=&quot;357-等于操作符&quot;&gt;3.5.7 等于操作符&lt;/h4&gt;
    &lt;p&gt;== ===&lt;/p&gt;
    &lt;h4 id=&quot;358-条件操作符&quot;&gt;3.5.8 条件操作符&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var max = (num1 &amp;gt; num2) ? num1 : num2;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;359-赋值操作符&quot;&gt;3.5.9 赋值操作符&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;乘/赋值（*=）；&lt;/li&gt;
  &lt;li&gt;除/赋值（/=）；&lt;/li&gt;
  &lt;li&gt;模/赋值（%=）；&lt;/li&gt;
  &lt;li&gt;加/赋值（+=）；&lt;/li&gt;
  &lt;li&gt;减/赋值（=）；&lt;/li&gt;
  &lt;li&gt;左移/赋值（«=）；&lt;/li&gt;
  &lt;li&gt;有符号右移/赋值（»=）；&lt;/li&gt;
  &lt;li&gt;无符号右移/赋值（»&amp;gt;=）。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;3510-赋值操作符&quot;&gt;3.5.10 赋值操作符&lt;/h4&gt;
&lt;p&gt;使用逗号操作符可以在一条语句中执行多个操作，如下面的例子所示：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var num1=1, num2=2, num3=3;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;逗号操作符多用于声明多个变量；但除此之外，逗号操作符还可以用于赋值。在用于赋值时，逗号
操作符总会返回表达式中的最后一项，如下面的例子所示：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var num = (5, 1, 4, 8, 0); // num 的值为0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;由于0 是表达式中的最后一项，因此num 的值就是0。虽然逗号的这种使用方式并不常见，但这个
例子可以帮我们理解逗号的这种行为。&lt;/p&gt;

&lt;h3 id=&quot;36-语句&quot;&gt;3.6 语句&lt;/h3&gt;
&lt;h4 id=&quot;361-if语句&quot;&gt;3.6.1 if语句&lt;/h4&gt;

&lt;h4 id=&quot;362-do-while语句&quot;&gt;3.6.2 do-while语句&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;do {
statement
} while (expression);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;363-while语句&quot;&gt;3.6.3 while语句&lt;/h4&gt;

&lt;h4 id=&quot;364-for语句&quot;&gt;3.6.4 for语句&lt;/h4&gt;

&lt;h4 id=&quot;365-for-in语句&quot;&gt;3.6.5 for-in语句&lt;/h4&gt;
&lt;p&gt;for-in 语句是一种精准的迭代语句，可以用来枚举对象的属性。以下是for-in 语句的语法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for (var propName in window) {
document.write(propName);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;367-break和continue语句&quot;&gt;3.6.7 break和continue语句&lt;/h4&gt;
&lt;p&gt;break 和continue 语句用于在循环中精确地控制代码的执行。其中，break 语句会立即退出循环，
强制继续执行循环后面的语句。而continue 语句虽然也是立即退出循环，但退出循环后会从循环的顶
部继续执行。请看下面的例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var num = 0;
for (var i=1; i &amp;lt; 10; i++) {
    if (i % 5 == 0) {
        break; //换成continue
    }
        num++;
}
alert(num); //4
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;368-with语句&quot;&gt;3.6.8 with语句&lt;/h4&gt;
&lt;p&gt;with 语句的作用是将代码的作用域设置到一个特定的对象中。with 语句的语法如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;with(location){
    var hostName = hostname;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;369-switch语句&quot;&gt;3.6.9 switch语句&lt;/h4&gt;

&lt;h3 id=&quot;37-函数&quot;&gt;3.7 函数&lt;/h3&gt;
&lt;p&gt;函数对任何语言来说都是一个核心的概念。通过函数可以封装任意多条语句，而且可以在任何地方、
任何时候调用执行。ECMAScript 中的函数使用function 关键字来声明，后跟一组参数以及函数体。
函数的基本语法如下所示：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function sayHi(name, message) {
    alert(&quot;Hello &quot; + name + &quot;,&quot; + message);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;ECMAScript 中的函数在定义时不必指定是否返回值。实际上，任何函数在任何时候都可以通过
return 语句后跟要返回的值来实现返回值。请看下面的例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function sum(num1, num2) {
    return num1 + num2;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;371-理解参数&quot;&gt;3.7.1 理解参数&lt;/h4&gt;
&lt;p&gt;ECMAScript 函数的参数与大多数其他语言中函数的参数有所不同。ECMAScript 函数不介意传递进来多少个参数，也不在乎传进来参数是什么数据类型。也就是说，即便你定义的数只接收两个参数，在调用这个函数时也未必一定要传递两个参数。可以传递一个、三个甚至不传递数，而解析器永远不会有什么怨言。之所以会这样，原因是ECMAScript中的参数在内部是用一个数组来表示的。函数接收到的始终都是这个数组，而不关心数组中包含哪些参数（如果有参数的话）。如果这个数组中不包含任何元素，无所谓；如果包含多个元素，也没有问题。实际上，在函数体内可以通过arguments 对象来访问这个参数数组，从而获取传递给函数的每一个参数。&lt;br /&gt;
其实，arguments 对象只是与数组类似（它并不是Array的实例），因为可以使用方括号语法访问它的每一个元素（即第一个元素是arguments[0]，第二个素是argumetns[1]，以此类推），使用length属性来确定传递进来多少个参数。在前面的例子中，sayHi()函数的第一个参数的名字叫name，而该参数的值也可以通过访问arguments[0]来获取。因此，那个函数也可以像下面这样重写，即不显式地使用命名参数：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function sayHi() {
    alert(&quot;Hello &quot; + arguments[0] + &quot;,&quot; + arguments[1]);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这个重写后的函数中不包含命名的参数。虽然没有使用name 和message 标识符，但函数的功能依旧。这个事实说明了ECMAScript函数的一个重要特点：命名的参数只提供便利，但不是必需的。另外，在命名参数方面，其他语言可能需要事先创建一个函数签名，而将来的用必须与该签名一致。但在ECMAScript中，没有这些条条框框，解析器不会验证命名参数。通过访问arguments 对象的length属性可以获知有多少个参数传递给了函数。下面这个函数会在每次被调用时，输出传入其中的参数个数：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function howManyArgs() {
    alert(arguments.length);
}
howManyArgs(&quot;string&quot;, 45); //2
howManyArgs(); //0
howManyArgs(12); //1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;执行以上代码会依次出现3 个警告框，分别显示2、0 和1。由此可见，开发人员可以利用这一点让
函数能够接收任意个参数并分别实现适当的功能。请看下面的例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function doAdd() {
    if(arguments.length == 1) {
        alert(arguments[0] + 10);
    } else if (arguments.length == 2) {
        alert(arguments[0] + arguments[1]);
    }
}
doAdd(10); //20
doAdd(30, 20); //50
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;372-没有重载&quot;&gt;3.7.2 没有重载&lt;/h4&gt;
&lt;p&gt;ECMAScript 函数不能像传统意义上那样实现重载。而在其他语言（如Java）中，可以为一个函数编写两个定义，只要这两个定义的签名（接受的参数的类型和数量）不同即可。如前所述，ECMAScirpt函数没有签名，因为其参数是由包含零或多个值的数组来表示的。而没有函数签名，真正的重载是不可能做到的。&lt;/p&gt;

&lt;p&gt;如果在ECMAScript 中定义了两个名字相同的函数，则该名字只属于后定义的函数。请看下面的例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function addSomeNumber(num){
    return num + 100;
}
function addSomeNumber(num) {
    return num + 200;
}
var result = addSomeNumber(100); //300
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;在此，函数addSomeNumber()被定义了两次。第一个版本给参数加100，而第二个版本给参数加200。由于后定义的函数覆盖了先定义的函数，因此当在最后一行代码中调用这个函数时，返回的结果就是300。&lt;/p&gt;

&lt;p&gt;如前所述，通过检查传入函数中参数的类型和数量并作出不同的反应，可以模仿方法的重载。&lt;/p&gt;</content><author><name></name></author><summary type="html">第一章 Javascript简介 1.2 Javascript实现 虽然Javascript和ECMAScript通常都被人们用来表达相同的含义，但是Javascript的含义却比ECMA-262（发音为”ek-ma-script”）中规定的要多的多。没错，Javascript实现应该由以下三个不同的部分组成。 核心(ECMAScript) 文档对象模型(DOM) 浏览器对象模型(BOM)</summary></entry><entry><title type="html">jQuery源码分析 (第二部分)</title><link href="http://localhost:4000/2017/03/09/jQuery%E6%BA%90%E7%A0%81-%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86%E7%BB%AD.html" rel="alternate" type="text/html" title="jQuery源码分析 (第二部分)" /><published>2017-03-09T00:00:00+08:00</published><updated>2017-03-09T00:00:00+08:00</updated><id>http://localhost:4000/2017/03/09/jQuery%E6%BA%90%E7%A0%81(%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86%E7%BB%AD)</id><content type="html" xml:base="http://localhost:4000/2017/03/09/jQuery%E6%BA%90%E7%A0%81-%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86%E7%BB%AD.html">&lt;blockquote&gt;
  &lt;p&gt;接上次，谈到了jQuery中构造函数中的几个方法&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;273-get-index-&quot;&gt;2.7.3 .get( [index] )&lt;/h3&gt;
&lt;p&gt;方法.get( [index] ) 返回当前jQuery 对象中指定位置的元素或包含了全部元素的数组。
如果没有传入参数，则调用.toArray() 返回包含了所有元素的数组；如果指定了参数index，
则返回一个单独的元素；参数index 从0 开始计算，并且支持负数，负数表示从元素集合末
尾开始计算。相关代码如下所示：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;227 // Get the Nth element in the matched element set OR
228 // Get the whole matched element set as a clean array
229 get: function( num ) {
230 return num == null ?
231
232 // Return a 'clean' array
233 this.toArray() :
234
235 // Return just the object
236 ( num &amp;lt; 0 ? this[ this.length + num ] : this[ num ] );
237 },
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;273-each-functionindex-element-jqueryeach-collection-callbackindexinarray-valueofelement-&quot;&gt;2.7.3 .each( function(index, Element) )、jQuery.each( collection, callback(indexInArray, valueOfElement) )&lt;/h3&gt;

&lt;h4 id=&quot;1-each-functionindex-element-&quot;&gt;1. .each( function(index, Element) )&lt;/h4&gt;
&lt;p&gt;方法.each() 遍历当前jQuery 对象，并在每个元素上执行回调函数。每当回调函数执行时，会
传递当前循环次数作为参数，循环次数从0 开始计数；更重要的是，回调函数是在当前元素为上
下文的语境中触发的，即关键字this 总是指向当前元素；在回调函数中返回false 可以终止遍历。
方法.each() 内部通过简单的调用静态方法jQuery.each() 实现，相关代码如下所示：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;267 // Execute a callback for every element in the matched set.
268 // (You can seed the arguments with an array of args, but this is
269 // only used internally.)
270 each: function( callback, args ) {
271     return jQuery.each( this, callback, args );
272 },
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;2-jqueryeach-collection-callbackindexinarray-valueofelement-&quot;&gt;2. jQuery.each( collection, callback(indexInArray, valueOfElement) )&lt;/h4&gt;
&lt;p&gt;静态方法jQuery.each() 是一个通用的遍历迭代方法，用于无缝地遍历对象和数组。对于
数组和含有length 属性的类数组对象（如函数参数对象arguments），该方法通过下标遍历，
从0 到length-1 ；对于其他对象则通过属性名遍历（for-in）。在遍历过程中，如果回调函数
返回false，则结束遍历。相关代码如下所示：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;627 // args is for internal usage only
628 each: function( object, callback, args ) {
629 var name, i = 0,
630 length = object.length,
631 isObj = length === undefined || jQuery.isFunction( object );
632
633 if ( args ) {
634     if ( isObj ) {
635         for ( name in object ) {
636             if ( callback.apply( object[ name ], args ) === false ) {
637                 break;
638             }
639         }
640     } else {
641         for ( ; i &amp;lt; length; ) {
642             if ( callback.apply( object[ i++ ], args ) === false ) {
643                 break;
644             }
645         }
646     }
647
648 // A special, fast, case for the most common use of each
649     } else {
650         if ( isObj ) {
651             for ( name in object ) {
652                 if ( callback.call( object[ name ], name, object[ name ])===false){
653                     break;
654                 }
655             }
656         } else {
657             for ( ; i &amp;lt; length; ) {
658                 if ( callback.call( object[ i ], i, object[ i++ ] ) === false ) {
659                     break;
660                 }
661             }
662         }
663     }
664
665     return object;
666 },
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;274-map-callbackindex-domelement-jquerymap-arrayorobjectcallbackvalue-indexorkey-&quot;&gt;2.7.4 .map( callback(index, domElement) )、jQuery.map( arrayOrObject,callback(value, indexOrKey) )&lt;/h3&gt;

&lt;h4 id=&quot;1-map-callbackindex-domelement-&quot;&gt;1. .map( callback(index, domElement) )&lt;/h4&gt;
&lt;p&gt;方法.map() 遍历当前jQuery对象，在每个元素上执行回调函数，并将回调函数的返回值放入一个新jQuery 对象中。该方法常用于获取或设置DOM 元素集合的值。执行回调函数时，关键字this 指向当前元素。回调函数可以返回一个独立的数据项或数据项数组，返回值将被插入结果集中；如果返回一个数组，数组中的元素会被插入结果集；如果回调函数返回null或undefined，则不会插入任何元素。方法.map() 内部通过静态方法jQuery.map()和原型方法.pushStack()实现，相关代码如
下所示：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;304 map: function( callback ) {
305     return this.pushStack( jQuery.map(this, function( elem, i ) {
306         return callback.call( elem, i, elem );
307     }));
308 },
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;2-jquerymap-arrayorobject-callbackvalue-indexorkey-&quot;&gt;2. jQuery.map( arrayOrObject, callback(value, indexOrKey) )&lt;/h3&gt;
&lt;p&gt;静态方法jQuery.map() 对数组中的每个元素或对象的每个属性调用一个回调函数，并将回调函数的返回值放入一个新的数组中。执行回调函数时传入两个参数：数组元素或属性值，元素下标或属性名。关键字this 指向全局对象window。回调函数的返回值会被放入新的数组中；如果返回一个数组，数组中将被扁平化后插入结果集；如果返回null或undefined，则不会放入任何元素。相关代码如下所示：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;760 // arg is for internal usage only
761 map: function( elems, callback, arg ) {
762     var value, key, ret = [],
763     i = 0,
764     length = elems.length,
765 // jquery objects are treated as arrays
766     isArray = elems instanceof jQuery || length !== undefined &amp;amp;&amp;amp; typeof length === &quot;number&quot; &amp;amp;&amp;amp; ( ( length &amp;gt; 0 &amp;amp;&amp;amp; elems[ 0 ] &amp;amp;&amp;amp; elems[ length -1 ] ) || length === 0 || jQuery.isArray( elems ) ) ;
767
768 // Go through the array, translating each of the items to their
769     if ( isArray ) {
770         for ( ; i &amp;lt; length; i++ ) {
771             value = callback( elems[ i ], i, arg );
772
773             if ( value != null ) {
774                 ret[ ret.length ] = value;
775             }
776         }
777
778 // Go through every key on the object,
779     } else {
780         for ( key in elems ) {
781             value = callback( elems[ key ], key, arg );
782
783             if ( value != null ) {
784                 ret[ ret.length ] = value;
785             }
786         }
787     }
788
789 // Fl atten any nested arrays
790 return ret.concat.apply( [], ret );
791 },
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;第790 行：最后在空数组[] 上调用方法concat() 扁平化结果集ret 中的元素，并返回。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;275-pushstack-elements-name-arguments-&quot;&gt;2.7.5 .pushStack( elements, name, arguments )&lt;/h3&gt;
&lt;p&gt;原型方法.pushStack() 创建一个新的空jQuery 对象，然后把DOM 元素集合放入这个jQuery 对象中，并保留对当前jQuery 对象的引用。&lt;/p&gt;

&lt;p&gt;原型方法.pushStack() 是核心方法之一，它为以下方法提供支持：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;jQuery 对象遍历：.eq()、.first()、.last()、.slice()、.map()。&lt;/li&gt;
  &lt;li&gt;DOM 查找、过滤：.find()、.not()、.filter()、.closest()、.add()、.andSelf()。&lt;/li&gt;
  &lt;li&gt;DOM 遍历：.parent()、.parents()、.parentsUntil()、.next()、.prev()、.nextAll() .prevAll()、.nextUnit()、.prevUnit()、.siblings()、.children()、.contents()。&lt;/li&gt;
  &lt;li&gt;DOM插入：jQuery.before()、jQuery.after()、jQuery.replaceWith()、.append()、.prepent()、.before()、.after()、.replaceWith()。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;相关代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;239 // Take an array of elements and push it onto the stack
240 // (returning the new matched element set)
241 pushStack: function( elems, name, selector ) {
242 // Build a new jQuery matched element set
243     var ret = this.constructor();
244
245     if ( jQuery.isArray( elems ) ) {
246         push.apply( ret, elems );
247
248     } else {
249         jQuery.merge( ret, elems );
250     }
251
252 // Add the old object onto the stack (as a reference)
253     ret.prevObject = this;
254
255     ret.context = this.context;
256
257     if ( name === &quot;find&quot; ) {
258         ret.selector = this.selector + ( this.selector ? &quot; &quot; : &quot;&quot; ) + selector;
259     } else if ( name ) {
260         ret.selector = this.selector + &quot;.&quot; + name + &quot;(&quot; + selector + &quot;)&quot;;
261     }
262
263 // Return the newly-formed element set
264     return ret;
265 },
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;276-end&quot;&gt;2.7.6 .end()&lt;/h3&gt;

&lt;p&gt;方法.end() 结束当前链条中最近的筛选操作，并将匹配元素集合还原为之前的状态。相关代码如下所示：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;310 end: function() {
311     return this.prevObject || this.constructor(null);
312 },
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;第311 行：返回前一个jQuery 对象。如果属性prevObject不存在，则构建一个空的jQuery 对象返回。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;方法.pushStack() 用于入栈，方法.end() 则用于出栈。这两个方法可以像下面的例子这样使用：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$('ul.first').find('.foo')
.css('background-color', 'red')
.end().find('.bar')
.css('background-color', 'green')
.end();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;277-eq-index-firstlastslice-start--end-&quot;&gt;2.7.7 .eq( index )、.first()、.last()、.slice( start [, end] )&lt;/h3&gt;

&lt;p&gt;方法.eq( index ) 将匹配元素集合缩减为集合中指定位置的元素；方法.first()将匹配元素集合缩减为集合中的第一个元素；方法.last()将匹配元素集合缩减为集合中的最后一个元素；方法.slice( start [, end] ) 将匹配元素集合缩减为指定范围的子集。方法.first()和.last()通过调用.eq( index ) 实现，.eq( index ) 则通过.slice( start [, end] ) 实现，.slice( start [, end] ) 则通过调用.pushStack( elements, name, arguments ) 实现，方法调用链为.first/last() → .eq( index ) → .slice( start [, end] ) → .pushStack( elements, name, arguments )。&lt;/p&gt;

&lt;p&gt;相关代码如下所示：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;284 eq: function( i ) {
285         i = +i;
286         return i === -1 ?
287         this.slice( i ) :
288         this.slice( i, i + 1 );
289     },
290
291 first: function() {
292            return this.eq( 0 );
293        },
294
295 last: function() {
296           return this.eq( -1 );
297       },
298
299 slice: function() {
300             return this.pushStack( slice.apply( this, arguments ),
301             &quot;slice&quot;, slice.call(arguments).join(&quot;,&quot;) );
302     },
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;278-push-value--sort-orderfunc-splice-startdeletecount-value--&quot;&gt;2.7.8 .push( value, … )、.sort( [orderfunc] )、.splice( start,deleteCount, value, … )&lt;/h3&gt;

&lt;p&gt;方法.push( value, … ) 向当前jQuery 对象的末尾添加新元素，并返回新长度，例如：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var foo = $(document);
foo.push( document.body ); // 2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;方法.sort( [orderfunc] ) 对当前jQuery 对象中的元素进行排序，可以传入一个比较函数
来指定排序方式&lt;/p&gt;

&lt;p&gt;方法.splice( start,deleteCount, value, … ) 向当前jQuery 对象中插入、删除或替换元素。&lt;/p&gt;

&lt;p&gt;如果从当前jQuery 对象中删除了元素，则返回含有被删除元素的数组。&lt;/p&gt;

&lt;p&gt;方法.push()、.sort()、.splice() 仅在内部使用，都指向同名的数组方法，因此它们的参数、
功能和返回值与数组方法完全一致。&lt;/p&gt;

&lt;h2 id=&quot;28-静态属性和方法&quot;&gt;2.8 静态属性和方法&lt;/h2&gt;
&lt;p&gt;在构造jQuery 对象模块中还定义了一些重要的静态属性和方法，它们是其他模块实现的
基础。&lt;/p&gt;

&lt;p&gt;整体结构如下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;388 jQuery.extend({
389     noConflict: function( deep ) {},
402     isReady: false,
406     readyWait: 1,
409     holdReady: function( hold ) {},
418     ready: function( wait ) {},
444     bindReady: function() {},
492     isFunction: function( obj ) {},
496     isArray: Array.isArray || function( obj ) {},
501     isWindow: function( obj ) {},
505     isNumeric: function( obj ) {},
509     type: function( obj ) {},
515     isPlainObject: function( obj ) {},
544     isEmptyObject: function( obj ) {},
551     error: function( msg ) {},
555     parseJSON: function( data ) {},
581     parseXML: function( data ) {},
601     noop: function() {},
606     globalEval: function( data ) {},
619     camelCase: function( string ) {},
623     nodeName: function( elem, name ) {},
628     each: function( object, callback, args ) {},
669     trim: trim ? function( text ) {} : function( text ) {},
684     makeArray: function( array, results ) {},
702     inArray: function( elem, array, i ) {},
724     merge: function( first, second ) {},
744     grep: function( elems, callback, inv ) {},
761     map: function( elems, callback, arg ) {},
794     guid: 1,
798     proxy: function( fn, context ) {},
825     access: function( elems, key, value, exec, fn, pass ) { },
852     now: function() {},
858     uaMatch: function( ua ) {},
870     sub: function() {},
891     browser: {}
892 });
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;281-jquerynoconflict-removeall-&quot;&gt;2.8.1 jQuery.noConflict( [removeAll] )&lt;/h3&gt;
&lt;p&gt;方法jQuery.noConflict( [removeAll] ) 用于释放jQuery 对全局变量$ 的控制权，可选的参
数removeAll 指示是否释放对全局变量jQuery 的控制权。$ 仅仅是jQuery 的别名，所有的功
能没有$ 也能使用。&lt;br /&gt;
很多JavaScript 库使用美元符$ 作为函数名或变量名，在使用jQuery 的同时，如果需要
使用另一个JavaScript 库，可以调用$.noConflict() 返回$ 给其他库。如果有必要（例如，在
一个页面中使用多个版本的jQuery 库，但很少有这样的必要），也可以释放全局变量jQuery
的控制权，只需要给这个方法传入参数true 即可。&lt;/p&gt;

&lt;p&gt;相关代码如下所示:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;30 // Map over jQuery in case of overwrite
31  _jQuery = window.jQuery,
32
33 // Map over the $ in case of overwrite
34  _$ = window.$,
388 jQuery.extend({
389     noConflict: function( deep ) {
390     if ( window.$ === jQuery ) {
391         window.$ = _$;
392     }
393
394     if ( deep &amp;amp;&amp;amp; window.jQuery === jQuery ) {
395         window.jQuery = _jQuery;
396     }
397
398     return jQuery;
399 },
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;282类型检测jqueryisfunction-obj-jqueryisarray-obj-jqueryiswindow-obj-jqueryisnumeric-value-jquerytype-obj-jqueryisplainobject-object-jqueryisemptyobject-object-&quot;&gt;2.8.2　类型检测：jQuery.isFunction( obj )、jQuery.isArray( obj )、jQuery.isWindow( obj )、jQuery.isNumeric( value )、jQuery.type( obj )、jQuery.isPlainObject( object )、jQuery.isEmptyObject( object )&lt;/h3&gt;

&lt;h4 id=&quot;1-jqueryisfunction-obj-jqueryisarray-obj-&quot;&gt;1. jQuery.isFunction( obj )、jQuery.isArray( obj )&lt;/h4&gt;

&lt;p&gt;方法jQuery.isFunction( obj ) 用于判断传入的参数是否是函数；方法jQuery.isArray( obj )
用于判断传入的参数是否是数组。这两个方法的实现依赖于方法jQuery.type( obj )，通过判断 jQuery.type( obj ) 返回值是否是“function”和“array”来实现。相关代码如下所示：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;489 // See test/unit/core.js for details concerning isFunction.
490 // Since version 1.3, DOM methods and functions like alert
491 // aren't supported. They return false on IE (#2968).
492 isFunction: function( obj ) {
493     return jQuery.type(obj) === &quot;function&quot;;
494 },
495
496 isArray: Array.isArray || function( obj ) {
497     return jQuery.type(obj) === &quot;array&quot;;
498 },
499
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;2-jquerytype-obj-&quot;&gt;2. jQuery.type( obj )&lt;/h4&gt;
&lt;p&gt;方法jQuery.type( obj )用于判断参数的内建JavaScript 类型。如果参数是undefined 或 null，返回“ undefined”或“null”；如果参数是JavaScript内部对象，则返回对应的字符串名称；其他情况一律返回“object”。相关代码如下所示：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;509 type: function( obj ) {
510     return obj == null ?
511     String( obj ) :
512     class2type[ toString.call(obj) ] || &quot;object&quot;;
513 },
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;其中class2type的构造方法如下:&lt;/p&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;87　 toString = Object.prototype.toString,
94　 // [[Class]] -&amp;gt; type pairs
95　 class2type = {};
894　// Ppulate the class2type map
895　jQuery.each(&quot;Boolean Number String Function Array Date RegExp Object&quot;.split(&quot; &quot;),      function(i, name) {
896　   class2type[ &quot;[object &quot; + name + &quot;]&quot; ] = name.toLowerCase();
897　});
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;对象class2type 初始化后的结构为：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;[object Array]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;array&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[object Boolean]&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;boolean&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[object Date]&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;date&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[object Function]&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;function&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[object Number]&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;number&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[object Object]&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;object&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[object RegExp]&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;regexp&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[object String]&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;3-jqueryiswindow-obj-&quot;&gt;3. jQuery.isWindow( obj )&lt;/h4&gt;
&lt;p&gt;方法jQuery.isWindow(obj)用于判断传入的参数是否是window对象，通过检测是否存在特征属性setInterval来实现，相关代码如下所示：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;500 // A crude way of determining if an object is a window
501 isWindow: function( obj ) {
502     return obj &amp;amp;&amp;amp; typeof obj === &quot;object&quot; &amp;amp;&amp;amp; &quot;setInterval&quot; in obj;
503 },
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在最新版本中改为是对窗口自身的引用。&lt;/p&gt;

&lt;h4 id=&quot;4-jqueryisnumeric-value-&quot;&gt;4. jQuery.isNumeric( value )&lt;/h4&gt;
&lt;p&gt;方法jQuery.isNumeric( value ) 用于判断传入的参数是否是数字，或者看起来是否像数字，相关代码如下所示：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;505 isNumeric: function( obj ) {
506     return !isNaN( parseFloat(obj) ) &amp;amp;&amp;amp; isFinite( obj );
507 },
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;先执行parseFloat( obj )尝试把参数obj解析为数字，然后用isNaN()判断解析结果是否是合法数字，并用isFinite() 判断参数obj是否是有限的。如果parseFloat(obj)的解析结果是合法数字，并且参数obj是有限数字，则返回true；否则返回false。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;5-jqueryisplainobject-object-&quot;&gt;5. jQuery.isPlainObject( object )&lt;/h4&gt;

&lt;p&gt;方法jQuery.isPlainObject(object)用于判断传入的参数是否是“纯粹”的对象，即是否是用对象直接量{} 或new Object() 创建的对象。相关代码如下所示：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;515 isPlainObject: function( obj ) {
516 // Must be an Object.
517 // Because of IE, we also have to check the presence of the constructor property.
518 // Make sure that DOM nodes and window objects don't pass through, as well
519 if ( !obj || jQuery.type(obj) !== &quot;object&quot; || obj.nodeType || jQuery.isWindow( obj ) ) {
520     return false;
521 }
522
523 try {
524     // Not own constructor property must be Object
525     if ( obj.constructor &amp;amp;&amp;amp;
526         !hasOwn.call(obj, &quot;constructor&quot;) &amp;amp;&amp;amp;
527         !hasOwn.call(obj.constructor.prototype, &quot;isPrototypeOf&quot;) ) {
528         return false;
529     }
530     } catch ( e ) {
531     // IE8,9 Will throw exceptions on certain host objects #9897
532         return false;
533     }
534 
535     // Own properties are enumerated firstly, so to speed up,
536     // if last one is own, then all properties are own.
537 
538     var key;
539     for ( key in obj ) {}
540 
541     return key === undefined || hasOwn.call( obj, key );
542 },
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;第523 ～ 533 行：检查对象obj是否由构造函数Object()创建。如果对象obj满足以下所有条件，则认为不是由构造函数Object() 创建，而是由自定义构造函数创建，返回false：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;对象 obj 含有属性 constructor。由构造函数创建的对象都有一个 constructor 属性，默
认引用了该对象的构造函数。如果对象obj 没有属性constructor，则说明该对象必然
是通过对象字面量{} 创建的。&lt;/li&gt;
  &lt;li&gt;对象 obj 的属性 constructor 是非继承属性。默认情况下，属性 constructor 继承自构造
函数的原型对象。如果属性constructor是非继承属性，说明该属性已经在自定义构造函数中被覆盖。&lt;/li&gt;
  &lt;li&gt;对象 obj 的原型对象中没有属性 isPrototypeOf。属性 isPrototypeOf 是 Object 原型对象
的特有属性，如果对象obj 的原型对象中没有，说明不是由构造函数Object() 创建，
而是由自定义构造函数创建。&lt;/li&gt;
  &lt;li&gt;执行以上检测时抛出了异常。在 IE8/9中，在某些浏览器对象上执行以上检测时会抛出异常，也应该返回false。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;函数hasOwn() 指向Object.prototype.hasOwnProperty( property )，用于检查对象是否含有
执行名称的非继承属性。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;6-jqueryisemptyobject-object-&quot;&gt;6. jQuery.isEmptyObject( object )&lt;/h4&gt;
&lt;p&gt;方法jQuery.isEmptyObject( object ) 用于检测对象是否是空的（即不包含属性）。例如：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jQuery.isEmptyObject( {} ) // true
jQuery.isEmptyObject( new Object() ) // true
jQuery.isEmptyObject( { foo: &quot;bar&quot; } ) // false
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;方法jQuery.isEmptyObject( object ) 的相关代码如下所示：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;544 isEmptyObject: function( obj ) {
545     for ( var name in obj ) {
546         return false;
547     }
548     return true;
549 },  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;283解析json-和xmljqueryparsejson-data-jqueryparsexml-data-&quot;&gt;2.8.3　解析JSON 和XML：jQuery.parseJSON( data )、jQuery.parseXML( data )&lt;/h3&gt;

&lt;h4 id=&quot;1-jqueryparsejson-data-&quot;&gt;1. jQuery.parseJSON( data )&lt;/h4&gt;

&lt;p&gt;方法jQuery.parseJSON( data )接受一个格式良好的JSON字符串，返回解析后的JavaScript对象。如果传入残缺的JSON字符串可能导致程序抛出异常；如果不传入参数，或者传入空字符串、null、undefined，则返回null。如果浏览器提供了原生方法JSON.parse()，则使用该方法解析JSON 字符串；否则使用( new Function( “return”+ data ) )() 解析JSON 字符串。&lt;/p&gt;

&lt;p&gt;代码如下所示：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;555 parseJSON: function( data ) {
556     if ( typeof data !== &quot;string&quot; || !data ) {
557         return null;
558     }
559
560 // Make sure leading/trailing whitespace is removed (IE can't handle it)
561     data = jQuery.trim( data );
562
563 // Attempt to parse using the native JSON parser first
564     if ( window.JSON &amp;amp;&amp;amp; window.JSON.parse ) {
565         return window.JSON.parse( data );
566     }
567
568 // Make sure the incoming data is actual JSON
569 // Logic borrowed from http:// json.org/json2.js
570     if ( rvalidchars.test( data.replace( rvalidescape, &quot;@&quot; )
571                     .replace( rvalidtokens, &quot;]&quot; )
572                     .replace( rvalidbraces, &quot;&quot;)) ) {
573 
574         return ( new Function( &quot;return &quot; + data ) )();
575 
576     }
577     jQuery.error( &quot;Invalid JSON: &quot; + data );
578 },
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;284-jqueryglobaleval-code-&quot;&gt;2.8.4 jQuery.globalEval( code )&lt;/h3&gt;

&lt;p&gt;方法jQuery.globalEval ( code ) 用于在全局作用域中执行JavaScript代码。很多时候我们希望JavaScript代码是在全局作用域中执行，例如，当动态加载并执行JavaScript 代码时。在IE 中，可以调用方法execScript()让JavaScript代码在全局作用域中执行；在其他浏览器中，则需要在一个自调用匿名函数中调用eval()执行JavaScript代码，自调用匿名函数确保了执行环境是全局作用域。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;在严格模式中EVAL函数的执行环境是自己的作用域&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;285-jquerycamelcase-string-&quot;&gt;2.8.5 jQuery.camelCase( string )&lt;/h3&gt;
&lt;p&gt;方法jQuery.camelCase( string )转换连字符式的字符串为驼峰式，用于CSS模块和数据缓存模块。例如：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jQuery.camelCase( 'background-color' );
// &quot;backgroundColor&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;相关代码：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;65 // Matches dashed string for camelizing
66 rdashAlpha = /-([a-z]|[0-9])/ig,
67 rmsPrefix = /^-ms-/,
68
69 // Used by jQuery.camelCase as callback to replace()
70 fcamelCase = function( all, letter ) {
71     return ( letter + &quot;&quot; ).toUpperCase();
72 },
617 // Convert dashed to camelCase; used by the css and data modules
618 // Microsoft forgot to hump their vendor prefix (#9572)
619 camelCase: function( string ) {
620     return string.replace( rmsPrefix, &quot;ms-&quot; ).replace( rdashAlpha, fcamelCase );
621 },
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;286-jquerynodename-elem-name-&quot;&gt;2.8.6 jQuery.nodeName( elem, name )&lt;/h3&gt;
&lt;p&gt;方法jQuery.nodeName( elem, name ) 用于检查DOM元素的节点名称（即属性nodeName）与指定的值是否相等，检查时忽略大小写。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;623 nodeName: function( elem, name ) {
624     return elem.nodeName &amp;amp;&amp;amp; elem.nodeName.toUpperCase() === name.toUpperCase();
625 },
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;287-jquerytrim-str-&quot;&gt;2.8.7 jQuery.trim( str )&lt;/h3&gt;

&lt;p&gt;方法jQuery.trim( str ) 用于移除字符串开头和结尾的空白符。如果传入的参数是null或undefined，则返回空字符串；如果传入的参数是对象，则先获取对象的字符串表示，然后移除开头和结尾的空白符，并返回。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;43  // Check if a string has a non-whitespace character in it
44  rnotwhite = /\S/,
45
46  // Used for trimming whitespace
47  trimLeft = /^\s+/,
48  trimRight = /\s+$/,
91  trim = String.prototype.trim,
910　// IE doesn't match non-breaking spaces with \s
911 if ( rnotwhite.test( &quot;\xA0&quot; ) ) {
912     trimLeft = /^[\s\xA0]+/;
913     trimRight = /[\s\xA0]+$/;
914 }
668 // Use native String.trim function wherever possible
669 trim: trim ?
670 function( text ) {
671     return text == null ?
672     &quot;&quot; :
673     trim.call( text );
674 } :
675
676 // Otherwise use our own trimming functionality
677 function( text ) {
678     return text == null ?
679     &quot;&quot; :
680     text.toString().replace( trimLeft, &quot;&quot; ).replace( trimRight, &quot;&quot; );
681 },
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;288数组操作方法jquerymakearray-obj-jqueryinarray-value-array--fromindex-jquerymerge-first-second-jquerygrep-array-functionelementofarray-indexinarray--invert-&quot;&gt;2.8.8　数组操作方法：jQuery.makeArray( obj )、jQuery.inArray( value, array [, fromIndex] )、jQuery.merge( first, second )、jQuery.grep( array, function(elementOfArray, indexInArray) [, invert] )&lt;/h3&gt;

&lt;h4 id=&quot;1-jquerymakearray-obj-&quot;&gt;1. jQuery.makeArray( obj )&lt;/h4&gt;
&lt;p&gt;方法jQuery.makeArray( obj )可以将一个类数组对象转换为真正的数组。在jQuery 内部，还可以为方法jQuery.makeArray()传入第二个参数，这样，第一个参数中的元素将被合并入第二个参数，最后会返回第二个参数，此时返回值的类型不一定是真正的数组。&lt;/p&gt;

&lt;p&gt;方法jQuery.makeArray( obj ) 的源码如下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;89 push = Array.prototype.push,
683 // results is for internal usage only
684 makeArray: function( array, results ) {
685     var ret = results || [];
686
687     if ( array != null ) {
688 // The window, strings (and functions) also have 'length'
689 // Theaked logic slightly to handle Blackberry 4.7 RegExp issues #6930
690     var type = jQuery.type( array );
691
692         if ( array.length == null
                || type === &quot;string&quot;
                || type === &quot;function&quot;
                || type === &quot;regexp&quot;
                || jQuery.isWindow( array ) ) {
693                    push.call( ret, array );
694                } else {
695                    jQuery.merge( ret, array );
696                }
697         }
698
699     return ret;
700 },
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;2-jqueryinarray-value-array-fromindex-&quot;&gt;2. jQuery.inArray( value, array[, fromIndex] )&lt;/h4&gt;
&lt;p&gt;方法jQuery.inArray( value, array[, fromIndex] ) 在数组中查找指定的元素并返回其下标，
未找到则返回-1。相关代码如下所示：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;702 inArray: function( elem, array, i ) {
703 var len;
704
705     if ( array ) {
706         if ( indexOf ) {
707             return indexOf.call( array, elem, i );
708         }
709 
710         len = array.length;
711         i = i ? i &amp;lt; 0 ? Math.max( 0, len + i ) : i : 0;
712 
713         for ( ; i &amp;lt; len; i++ ) {
714         // Sip accessing in sparse arrays
715             if ( i in array &amp;amp;&amp;amp; array[ i ] === elem ) {
716                 return i;
717             }
718         }
719     }
720
721     return -1;
722 },
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;3-jquerymerge-first-second-&quot;&gt;3. jQuery.merge( first, second )&lt;/h4&gt;
&lt;p&gt;方法jQuery.merge( first, second ) 用于合并两个数组的元素到第一个数组中。事实上，第一个参数可以是数组或类数组对象，即必须含有整型（或可以转换为整型）属性length；第二个参数则可以是数组、类数组对象或任何含有连续整型属性的对象。&lt;/p&gt;

&lt;p&gt;方法jQuery.merge() 的合并行为是破坏性的，将第二个数组中的元素添加到第一个数组
中后，第一个数组就被改变了。如果希望原来的第一个数组不被改变，可以在调用jQuery.
merge() 之前创建一份第一个数组的副本：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var newArray = $.merge([], oldArray);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;方法jQuery.merge( first, second ) 的相关代码如下所示：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;724 merge: function( first, second ) {
725     var i = first.length,
726     j = 0;
727 
728     if ( typeof second.length === &quot;number&quot; ) {
729         for ( var l = second.length; j &amp;lt; l; j++ ) {
730             first[ i++ ] = second[ j ];
731         }
732 
733     } else {
734         while ( second[j] !== undefined ) {
735             first[ i++ ] = second[ j++ ];
736         }
737     }
738 
739     first.length = i;
740 
741     return first;
742 },
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;4-jquerygrep-array-function-elementofarray-indexinarray--invert-&quot;&gt;4. jQuery.grep( array, function( elementOfArray, indexInArray )[, invert] )&lt;/h4&gt;
&lt;p&gt;方法jQuery.grep( array, function( elementOfArray, indexInArray )[, invert] ) 用于查找数组中满足过滤函数的元素，原数组不会受影响。&lt;/p&gt;

&lt;p&gt;如果参数invert 未传入或是false，元素只有在过滤函数返回true，或者返回值可以转换为true时，才会被保存在最终的结果数组中，即返回一个满足回调函数的元素数组；如果参数invert是true，则情况正好相反，返回的是一个不满足回调函数的元素数组。&lt;br /&gt;
代码如下所示：&lt;/p&gt;

&lt;p&gt;```
744 grep: function( elems, callback, inv ) {
745 var ret = [], retVal;
746 inv = !!inv;
747
748 // Go through the array, only saving the items
749 // that pass the validator function
750 for ( var i = 0, length = elems.length; i &amp;lt; length; i++ ) {
751     retVal = !!callback( elems[ i ], i );
752     if ( inv !== retVal ) {
753         ret.push( elems[ i ] );
754     }
755 }
756
757     return ret;
758 },&lt;/p&gt;</content><author><name></name></author><summary type="html">接上次，谈到了jQuery中构造函数中的几个方法</summary></entry><entry><title type="html">jQuery源码分析 (第二部分)</title><link href="http://localhost:4000/2017/03/06/jQuery%E6%BA%90%E7%A0%81-%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86.html" rel="alternate" type="text/html" title="jQuery源码分析 (第二部分)" /><published>2017-03-06T00:00:00+08:00</published><updated>2017-03-06T00:00:00+08:00</updated><id>http://localhost:4000/2017/03/06/jQuery%E6%BA%90%E7%A0%81(%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86)</id><content type="html" xml:base="http://localhost:4000/2017/03/06/jQuery%E6%BA%90%E7%A0%81-%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86.html">&lt;h1 id=&quot;第一章-构造jquery对象&quot;&gt;第一章 构造jQuery对象&lt;/h1&gt;
&lt;p&gt;jQuery对象是一个类数组对象，含有连续的整型属性、length属性和大量的jQuery方法。jQuery对象由构造函数jQuery()创建，$()则是jQuery()的缩写。&lt;/p&gt;
&lt;h2 id=&quot;21-构造函数jquery&quot;&gt;2.1 构造函数jQuery()&lt;/h2&gt;
&lt;p&gt;如果调用构造函数jQuery时传入的参数不同，创建jQuery对象的逻辑也会不同，构造函数jQuery有7种方法。如下：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;jQuery( selector [, context])接受一个css表达式和一个可选的选择器上下文，返回了一个包含匹配DOM元素的jQuery对象。&lt;/li&gt;
  &lt;li&gt;jQuery (html [,ownerDocument])、jQuery(html, props) 创建一个DOM元素&lt;/li&gt;
  &lt;li&gt;jQuery( element)、jQuery( elementArray ) 如果传入一个DOM元素或者DOM数组，则会把DOM元素封装到jQuery对象中并且返回&lt;/li&gt;
  &lt;li&gt;jQuery( callback )&lt;/li&gt;
  &lt;li&gt;jQuery( jQuery object )&lt;/li&gt;
  &lt;li&gt;jQUery( )&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;211-jquery-selector--context&quot;&gt;2.1.1 jQuery( selector [, context])&lt;/h3&gt;
&lt;p&gt;如果传入一个字符串参数，jQuery会检查这个字符串是选择器还是html代码，如果是选择器表达式，则遍历文档，查找与之匹配的DOM元素，并创建一个包含了这些DOM元素引用的jQuery对象；如果没有匹配的对象，则会创建一个空jQuery对象。下一节介绍参数是HTML代码的情况。&lt;br /&gt;
默认情况下，对匹配元素的查找将会从document对象开始，即查找整个文档树，不过也可以传入第二个参数context来限定查找范围。例如，可以这样限制查找范围。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$('div.foo').click(function() {
    $('span', this).addClass('bar');
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;方法find是调用CSS选择器引擎Sizzle实现，会在第三章进行介绍和分析。&lt;/p&gt;
&lt;h3 id=&quot;212-jquery--html-ownerdocument-jquery-html-props-&quot;&gt;2.1.2 jQuery ( html [,ownerDocument] )、jQuery( html, props )&lt;/h3&gt;
&lt;p&gt;如果传入的参数是一段html代码，jQuery则会尝试用这段HTML代码创建新的DOM元素，并且创建一个包含了这些DOM元素引入的jQuery对象。&lt;br /&gt;
第二个参数ownerDocument用于指定创建的新的DOM元素的文档对象，如果不传入，则默认为当前文档对象。&lt;br /&gt;
第二个参数还可以是props。属性可以是任意的时间类型（如”click”）还可以有下面的特殊属性:val, css, html, text, data, width, height, offset, 对应的jQuery方法: .val(), .css(), .html(), .text(), data(), width(), height(), offset()将会执行。举个梨子：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$('&amp;lt;div&amp;gt;', {
    &quot;class&quot;: &quot;test&quot;,
    text: &quot;click me&quot;,
    click: function() {
        $(this).toggleClass(&quot;test&quot;);
    }
}).appendTo(&quot;body&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;213-jquery-elementjquery-elementarray-&quot;&gt;2.1.3 jQuery( element)、jQuery( elementArray )&lt;/h3&gt;
&lt;p&gt;如果传入一个DOM元素或者DOM数组，则会把DOM元素封装到jQuery对象中并且返回。&lt;/p&gt;

&lt;h3 id=&quot;214-jquery-object-&quot;&gt;2.1.4 jQuery( object )&lt;/h3&gt;
&lt;p&gt;如果传入一个普通的jQuery对象，则会把这个对象封装jQuery对象中并且返回。
举个梨子:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var foo = {foo: 'bar', hello: 'world'};

var $foo = $(foo);

$foo.on('custom', function(){
    console.log('custom event is called');
});

$foo.triggle('custom');
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;215-jquery-callback-&quot;&gt;2.1.5 jQuery( callback )&lt;/h3&gt;
&lt;p&gt;如果传入一个函数，则在document上绑定一个ready事件监听函数，当DOM结构加载完成时执行。ready事件触发要早于load事件。ready事件并不是浏览器的原生事件，而是DOMContentLoaded事件、onreadystatechange事件和函数doScrollCheck()的统称。将在后面的学习中介绍。&lt;/p&gt;

&lt;h3 id=&quot;216-jquery-jquery-object-&quot;&gt;2.1.6 jQuery( jQuery object )&lt;/h3&gt;
&lt;p&gt;如果传入一个jQuery对象，则创建这个jQuery对象的一个副本并且返回，副本与传入的jQuery对象引入的同一个元素。&lt;/p&gt;

&lt;h2 id=&quot;22-总体结构&quot;&gt;2.2 总体结构&lt;/h2&gt;

&lt;p&gt;构造jQuery对象模块源码架构如下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(function( window, undefined ) {
	 // 构造 jQuery 对象
22　 var jQuery = (function() {
25　 var jQuery = function( selector, context ) {
27　 	return new jQuery.fn.init( selector, context, root jQuery );
28　 },
	 // 一堆局部变量声明
97　 jQuery.fn = jQuery.prototype = {
98　 	constructor: jQuery,
99　 	init: function( selector, context, rootjQuery ) { ... },
	 	// 一堆原型属性和方法
319　};
322　jQuery.fn.init.prototype = jQuery.fn;
324　jQuery.extend = jQuery.fn.extend = function() { ... };
388　jQuery.extend({
// 一堆静态属性和方法
892　 });
955　 return jQuery;
957 })();
// 省略其他模块的代码
9246　 window.jQuery = window.$ = jQuery;
9266　})( window );
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;这里解释一下为什么要在第97行执行-jqueryfn--jqueryprototype-设置jqueryfn指向构造函数jquery的原型对象&quot;&gt;这里解释一下为什么要在第97行执行 jQuery.fn = jQuery.prototype, 设置jQuery.fn指向构造函数jQuery()的原型对象。&lt;/h4&gt;
&lt;p&gt;jQuery.fn 是jQuery.prototype 的简写，可以少写7 个字符，以方便拼写。&lt;/p&gt;

&lt;h2 id=&quot;23-jqueryfninit-selector-context-rootjquery-&quot;&gt;2.3 jQuery.fn.init( selector, context, rootjQuery )&lt;/h2&gt;

&lt;h3 id=&quot;231-12个分支&quot;&gt;2.3.1 12个分支&lt;/h3&gt;

&lt;h3 id=&quot;232-源码分析&quot;&gt;2.3.2 源码分析&lt;/h3&gt;

&lt;h4 id=&quot;1定义jqueryfninit-selector-context-rootjquery-&quot;&gt;1.定义jQuery.fn.init( selector, context, rootjQuery )&lt;/h4&gt;
&lt;p&gt;相关代码如下所示：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;99  init: function( selector, context, rootjQuery ) {
100 	var match, elem, ret, doc;

// document.getElementById() 查找失败
172 	return rootjQuery.find( selector );

// selector 是选择器表达式且未指定 context
187 	return ( context || rootjQuery ).find( selector );

// selector 是函数
198 return rootjQuery.ready( selector );

// 定义 rootjQuery
916 // All jQuery objects should point back to these
917 rootjQuery = jQuery(document);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;2-参数selector-可以转换为false&quot;&gt;2. 参数selector 可以转换为false&lt;/h4&gt;
&lt;p&gt;参数selector 可以转换为false，例如是undefined、空字符串、null 等，则直接返回this，此时this 是空jQuery 对象，其属性length 等于0。&lt;/p&gt;

&lt;h4 id=&quot;3-参数selector-是dom元素&quot;&gt;3. 参数selector 是DOM元素&lt;/h4&gt;
&lt;p&gt;如果参数selector 有属性nodeType，则认为selector 是DOM 元素，手动设置第一个元素和属性context指向该DOM元素、属性length为1，然后返回包含了该DOM 元素引用的jQuery对象。&lt;/p&gt;

&lt;p&gt;相关代码：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;107 // Handle $(DOMElement)
108 if ( selector.nodeType ) {
109 	this.context = this[0] = selector;
110 	this.length = 1;
111 	return this;
112 }
113
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;4-参数selector是字符串body&quot;&gt;4. 参数selector是字符串“body”&lt;/h4&gt;

&lt;p&gt;如果参数selector 是字符串“ body”，手动设置属性context 指向document 对象、第一个元素指向body元素、属性length 为1，最后返回包含了body元素引用的jQuery 对象。这里是对查找字符串“ body”的优化，因为文档树中只会存在一个body 元素。相关代码如下所示：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;114 // The body element only exists once, optimize finding it
115 if ( selector === &quot;body&quot; &amp;amp;&amp;amp; !context &amp;amp;&amp;amp; document.body ) {
116 	this.context = document;
117 	this[0] = document.body;
118 	this.selector = selector;
119 	this.length = 1;
120 	return this;
121 }
122
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;5-参数selector还可以是复杂字符串&quot;&gt;5. 参数selector还可以是复杂字符串&lt;/h4&gt;
&lt;p&gt;此时会根据context参数来返回不同的结果。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;return( context|| rootjQuery ).find( selector );
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;24-jquerybuildfragment-args-nodes-scripts-&quot;&gt;2.4 jQuery.buildFragment( args, nodes, scripts )&lt;/h2&gt;

&lt;h3 id=&quot;241-实现原理&quot;&gt;2.4.1 实现原理&lt;/h3&gt;
&lt;p&gt;方法jQuery.buildFragment( args, nodes, scripts ) 先创建一个文档片段DocumentFragment，然后调用方法jQuery.clean( elems, context, fragment, scripts ) 将HTML 代码转换为DOM 元素，并存储在创建的文档片段中。文档片段DocumentFragment 表示文档的一部分，但不属于文档树。当把DocumentFragment 插入文档树时，插入的不是DocumentFragment 自身，而是它的所有子孙节点，即可以一次向文档树中插入多个节点。当需要插入大量节点时，相比于逐个插入节点，使用ocumentFragment 一次插入多个节点，性能的提升会非常明显。2此外，如果HTML 代码符合缓存条件，方法jQuery.buildFragment() 还会把转换后的DOM 元素缓存起来，下次（实际上是第三次）转换相同的HTML 代码时直接从缓存中读取，不需要重复转换。方法jQuery.buildFragment() 同时为构造jQuery 对象和DOM 操作提供底层支持，DOM操作将在第11章介绍和分析。&lt;/p&gt;

&lt;h3 id=&quot;242-源码分析&quot;&gt;2.4.2 源码分析&lt;/h3&gt;
&lt;p&gt;方法jQuery.buildFragment( args, nodes, scripts ) 执行的5 个关键步骤如下：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;如果HTML 代码符合缓存条件，则尝试从缓存对象jQuery.fragments 中读取缓存的DOM 元素。&lt;/li&gt;
  &lt;li&gt;创建文档片段DocumentFragment。&lt;/li&gt;
  &lt;li&gt;调用方法jQuery.clean( elems, context, fragment, scripts ) 将HTML 代码转换为DOM元素，并存储在创建的文档片段中。&lt;/li&gt;
  &lt;li&gt;如果HTML 代码符合缓存条件，则把转换后的DOM 元素放入缓存对象jQuery.fragments。&lt;/li&gt;
  &lt;li&gt;最后返回文档片段和缓存状态{ fragment: fragment, cacheable: cacheable }。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;25-jqueryclean-elems-context-fragment-scripts-&quot;&gt;2.5 jQuery.clean( elems, context, fragment, scripts )&lt;/h2&gt;

&lt;h3 id=&quot;251-实现原理&quot;&gt;2.5.1 实现原理&lt;/h3&gt;

&lt;p&gt;方法jQuery.clean( elems, context, fragment, scripts ) 负责把HTML代码转换成DOM元素，并提取其中的script元素。该方法先创建一个临时的div元素，并将其插入一个安全文档片段中，然后把HTML代码赋值给div元素的innerHTML属性，浏览器会自动生成DOM元素，最后解析div元素的子元素得到转换后的DOM元素。安全文档片段指能正确渲染HTML5元素的文档片段，通过在文档片段上创建HTML5元素，可以教会浏览器正确地渲染HTML5元素，稍后的源码分析会介绍其实现过程。如果HTML代码中含有需要包裹在父标签中的子标签，例如，子标签&lt;option&gt;需要包裹在父标签&lt;select&gt;中，方法jQuery.clean()会先在HTML代码的前后加上父标签和关闭标签，在设置临时div元素的innerHTML属性生成DOM元素后，再层层剥去包裹的父元素，取出HTML代码对应的DOM元素。如果HTML代码中含有&lt;script&gt;标签，为了能执行&lt;script&gt;标签所包含的JavaScript代码或引用的JavaScript文件，在设置临时div元素的innerHTML属性生成DOM元素后，方法jQuery.clean()会提取其中的script元素放入数组scripts。注意，将含有&lt;script&gt;标签的HTML代码设置给某个元素的innerHTML属性后，&lt;script&gt;标签所包含JavaScript代码不会自动执行，所引用的JavaScript文件也不会加载和执行。在11.2.1节分析DOM操作的核心工具方法jQuery.fn.domManip()时会看到，在生成的DOM元素插入文档树后，数组scripts中的script元素会被逐个手动执行。&lt;/script&gt;&lt;/script&gt;&lt;/script&gt;&lt;/script&gt;&lt;/select&gt;&lt;/option&gt;&lt;/p&gt;

&lt;h3 id=&quot;252-源码分析&quot;&gt;2.5.2 源码分析&lt;/h3&gt;
&lt;p&gt;方法jQuery.clean( elems, context, fragment, scripts ) 执行的8 个关键步骤如下：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;创建一个临时div 元素，并插入一个安全文档片段中。&lt;/li&gt;
  &lt;li&gt;为HTML 代码包裹必要的父标签，然后赋值给临时div 元素的innerHTML 属性，从而将HTML 代码转换为DOM 元素，之后再层层剥去包裹的父元素，得到转换后的DOM 元素。&lt;/li&gt;
  &lt;li&gt;移除IE 6/7 自动插入的空tbody 元素，插入IE 6/7/8 自动剔除的前导空白符。&lt;/li&gt;
  &lt;li&gt;取到转换后的DOM 元素集合。&lt;/li&gt;
  &lt;li&gt;在IE 6/7 中修正复选框和单选按钮的选中状态。&lt;/li&gt;
  &lt;li&gt;合并转换后的DOM 元素。&lt;/li&gt;
  &lt;li&gt;如果传入了文档片段fragment，则提取所有合法的script 元素存入数组scripts，并把其他元素插入文档片段fragment。&lt;/li&gt;
  &lt;li&gt;最后返回转换后的DOM 元素数组。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;26-jqueryextendjqueryfnextend&quot;&gt;2.6 jQuery.extend()、jQuery.fn.extend()&lt;/h2&gt;

&lt;h3 id=&quot;261-如何使用&quot;&gt;2.6.1 如何使用&lt;/h3&gt;
&lt;p&gt;方法jQuery.extend() 和jQuery.fn.extend() 用于合并两个或多个对象的属性到第一个对
象，它们的语法如下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jQuery.extend([deep], target, object1[, objectN])
jQuery.fn.extend([deep], target, object1[, objectN])
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;参数deep表示是一个可选的bool值，表示是否进行递归合并。合并默认是不递归的。
参数target是目标对象；参数object1和objectN是源对象包含了待合并的属性。如果只有一个对象，那么target参数被忽略，jQuery或者jQuery.fn被当做目标对象。&lt;/p&gt;

&lt;h2 id=&quot;27-原型属性和方法&quot;&gt;2.7 原型属性和方法&lt;/h2&gt;

&lt;p&gt;代码如下:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;97　jQuery.fn = jQuery.prototype = {
98      constructor: jQuery,
99      init: function( selector, context, rootjQuery ) {}
210         selector: &quot;&quot;,
213         jquery: &quot;1.7.1&quot;,
216         length: 0,
219         size: function() {},
223         toArray: function() {},
229         get: function( num ) {},
241         pushStack: function( elems, name, selector ) {},
270         each: function( callback, args ) {},
274         ready: function( fn ) {}, //
284         eq: function( i ) {},
291         first: function() {},
295         last: function() {},
299         slice: function() {},
304         map: function( callback ) {},
310         end: function() {},
316         push: push,
317         sort: [].sort,
318         splice:
319 };
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;271-selectorjquerylengthsize&quot;&gt;2.7.1 .selector、.jquery、.length、.size()&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;属性selector 用于记录jQuery 查找和过滤DOM 元素时的选择器表达式，但不一定是可
执行的选择器表达式，该属性更多的是为了方便调试。&lt;/li&gt;
  &lt;li&gt;属性jquery 表示正在使用的jQuery 版本号。&lt;/li&gt;
  &lt;li&gt;属性.length 表示当前jQuery对象中元素的个数。方法.size()返回当前jQuery对象中元素的个数。方法.size() 在功能上等价于属性.length，但应该优先使用属性.length，因为它没有函数调用开销。属性.selector、.jquery、.length、.size() 的相关代码如下所示：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;209 // Start with an empty selector
210 selector: &quot;&quot;,
211
212 // The current version of jQuery being used
213 jquery: &quot;1.7.1&quot;,
214
215 // The default length of a jQuery object is 0
216 length: 0,
217
218 // The number of elements contained in the matched element set
219 size: function() {
220     return this.length;
221 },
222
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;272-toarrayget-index-&quot;&gt;2.7.2 .toArray()、.get( [index] )&lt;/h3&gt;
&lt;p&gt;方法.toArray() 将当前jQuery 对象转换为真正的数组，转换后的数组包含了所有元素。
方法.toArray() 的实现巧妙地借用了数组的方法slice()，&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;86 // Save a reference to some core methods
87 toString = Object.prototype.toString,
88 hasOwn = Object.prototype.hasOwnProperty,
89 push = Array.prototype.push,
90 slice = Array.prototype.slice,
91 trim = String.prototype.trim,
92 indexOf = Array.prototype.indexOf,
223 toArray: function() {
224     return slice.call( this, 0 );
225 },
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;273-get-index-&quot;&gt;2.7.3 .get( [index] )&lt;/h3&gt;
&lt;p&gt;方法.get( [index] ) 返回当前jQuery 对象中指定位置的元素或包含了全部元素的数组。
如果没有传入参数，则调用.toArray() 返回包含了所有元素的数组；如果指定了参数index，
则返回一个单独的元素；参数index 从0 开始计算，并且支持负数，负数表示从元素集合末
尾开始计算。相关代码如下所示：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;227 // Get the Nth element in the matched element set OR
228 // Get the whole matched element set as a clean array
229 get: function( num ) {
230 return num == null ?
231
232 // Return a 'clean' array
233 this.toArray() :
234
235 // Return just the object
236 ( num &amp;lt; 0 ? this[ this.length + num ] : this[ num ] );
237 },
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;273-each-functionindex-element-jqueryeach-collection-callbackindexinarray-valueofelement-&quot;&gt;2.7.3 .each( function(index, Element) )、jQuery.each( collection, callback(indexInArray, valueOfElement) )&lt;/h3&gt;

&lt;h4 id=&quot;1-each-functionindex-element-&quot;&gt;1. .each( function(index, Element) )&lt;/h4&gt;
&lt;p&gt;方法.each() 遍历当前jQuery 对象，并在每个元素上执行回调函数。每当回调函数执行时，会
传递当前循环次数作为参数，循环次数从0 开始计数；更重要的是，回调函数是在当前元素为上
下文的语境中触发的，即关键字this 总是指向当前元素；在回调函数中返回false 可以终止遍历。
方法.each() 内部通过简单的调用静态方法jQuery.each() 实现，相关代码如下所示：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;267 // Execute a callback for every element in the matched set.
268 // (You can seed the arguments with an array of args, but this is
269 // only used internally.)
270 each: function( callback, args ) {
271 return jQuery.each( this, callback, args );
272 },
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;2-jqueryeach-collection-callbackindexinarray-valueofelement-&quot;&gt;2. jQuery.each( collection, callback(indexInArray, valueOfElement) )&lt;/h4&gt;
&lt;p&gt;静态方法jQuery.each() 是一个通用的遍历迭代方法，用于无缝地遍历对象和数组。对于
数组和含有length 属性的类数组对象（如函数参数对象arguments），该方法通过下标遍历，
从0 到length-1 ；对于其他对象则通过属性名遍历（for-in）。在遍历过程中，如果回调函数
返回false，则结束遍历。相关代码如下所示：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;627 // args is for internal usage only
628 each: function( object, callback, args ) {
629 var name, i = 0,
630 length = object.length,
631 isObj = length === undefined || jQuery.isFunction( object );
632
633 if ( args ) {
634     if ( isObj ) {
635         for ( name in object ) {
636             if ( callback.apply( object[ name ], args ) === false ) {
637                 break;
638             }
639         }
640     } else {
641         for ( ; i &amp;lt; length; ) {
642             if ( callback.apply( object[ i++ ], args ) === false ) {
643                 break;
644             }
645         }
646     }
647
648 // A special, fast, case for the most common use of each
649     } else {
650         if ( isObj ) {
651             for ( name in object ) {
652                 if ( callback.call( object[ name ], name, object[ name ])===false){
653                     break;
654                 }
655             }
656         } else {
657             for ( ; i &amp;lt; length; ) {
658                 if ( callback.call( object[ i ], i, object[ i++ ] ) === false ) {
659                     break;
660                 }
661             }
662         }
663     }
664
665     return object;
666 },
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">第一章 构造jQuery对象 jQuery对象是一个类数组对象，含有连续的整型属性、length属性和大量的jQuery方法。jQuery对象由构造函数jQuery()创建，$()则是jQuery()的缩写。 2.1 构造函数jQuery() 如果调用构造函数jQuery时传入的参数不同，创建jQuery对象的逻辑也会不同，构造函数jQuery有7种方法。如下： jQuery( selector [, context])接受一个css表达式和一个可选的选择器上下文，返回了一个包含匹配DOM元素的jQuery对象。 jQuery (html [,ownerDocument])、jQuery(html, props) 创建一个DOM元素 jQuery( element)、jQuery( elementArray ) 如果传入一个DOM元素或者DOM数组，则会把DOM元素封装到jQuery对象中并且返回 jQuery( callback ) jQuery( jQuery object ) jQUery( )</summary></entry><entry><title type="html">jQuery源码分析 (第一部分)</title><link href="http://localhost:4000/2017/03/06/jQuery%E6%BA%90%E7%A0%81-(-%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86.html" rel="alternate" type="text/html" title="jQuery源码分析 (第一部分)" /><published>2017-03-06T00:00:00+08:00</published><updated>2017-03-06T00:00:00+08:00</updated><id>http://localhost:4000/2017/03/06/jQuery%E6%BA%90%E7%A0%81%20(%20%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86)</id><content type="html" xml:base="http://localhost:4000/2017/03/06/jQuery%E6%BA%90%E7%A0%81-(-%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86.html">&lt;h1 id=&quot;第一章-总体架构&quot;&gt;第一章 总体架构&lt;/h1&gt;
&lt;h2 id=&quot;11-设计理念&quot;&gt;1.1 设计理念&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Write Less, Do more。&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;兼容主流浏览器&lt;/li&gt;
    &lt;li&gt;具有独特的链式语法&lt;/li&gt;
    &lt;li&gt;具有高效灵活的CSS选择器&lt;/li&gt;
    &lt;li&gt;拥有便捷的插件扩展机智和丰富的插件&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;12-总体架构&quot;&gt;1.2 总体架构&lt;/h2&gt;
&lt;p&gt;jQuery模块分成三部分：入口模块、底层支持模块以及功能模块。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;在构造函数jQuery()创建对象时传入选择器表达式就会调用Sizzle选择器。
    &lt;blockquote&gt;
      &lt;p&gt;Sizzle是一款纯JS实现的CSS选择器引擎。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;工具模块则提供了一些编程辅助方法，用于简化jQuery对象、DOM元素、数组、对象、字符串等操作。例如： jQuery.each()、 .each()、jQuery.map()、.map()、等，其他所有模块都会用到工具模块。&lt;/li&gt;
  &lt;li&gt;底层支持模块，回调函数列表模块用于增强对回调函数的管理，支持添加、删除、触发、锁定、禁用回调函数等功能；异步队列模块则用于解耦异步任务和回调函数，他在回调或异步函数的基础上为回调函数增加了状态，并提供了多个回调函数列表，支持传播任意同步或者异步函数的成功或失败状态。等等。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;下面看一下jQuery源码的总体架构&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(function( window, undefiend ) {
    //构造jQuery对象
    var jQuery = (function() {
        var jQuery = (function( selector, context ) {
            return new jQuery.fn.init( selector, context, rootjQuery );
        });
        return jQuery;
    })();
}(window);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;那么问题来了：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;为什么要创建一个自调用匿名函数？&lt;br /&gt;
为什么要为自调用匿名函数设置一个参数window，并且传入window对象？&lt;br /&gt;
为什么要为自调用匿名函数设置参数undefined？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;前两个问题我知道，这里回答一下第三个问题
通过把undefined作为函数参数使用，可以缩短查找undefined时候的作用域链，并且可以在压缩代码时进行优化。优化是这样进行的：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function( a, b ) {} (window);
// 参数 window 被压缩成 a， 参数 undefined 被压缩成 b。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;更重要的是，这里可以确保undefined的值是undefined，因为undefined有可能被重写为新的值。可以用下面的代码来重写undefined的值。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;undefiend = 'now it's defined';
console.log(undefined);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">第一章 总体架构 1.1 设计理念 Write Less, Do more。 兼容主流浏览器 具有独特的链式语法 具有高效灵活的CSS选择器 拥有便捷的插件扩展机智和丰富的插件</summary></entry><entry><title type="html">今天，我的博客开通了</title><link href="http://localhost:4000/2017/03/05/hello-world.html" rel="alternate" type="text/html" title="今天，我的博客开通了" /><published>2017-03-05T00:00:00+08:00</published><updated>2017-03-05T00:00:00+08:00</updated><id>http://localhost:4000/2017/03/05/hello-world</id><content type="html" xml:base="http://localhost:4000/2017/03/05/hello-world.html">&lt;h2 id=&quot;今天我的博客开通了&quot;&gt;今天，我的博客开通了&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;我的第一篇文章&lt;/li&gt;
  &lt;li&gt;今天再一次使用了jekyll模版, 上一次使用还是两年前~ 由于当时有别的东西吸引了我的注意，所以并没有传承写博客的优良传统。&lt;/li&gt;
  &lt;li&gt;这次再次启动jekyll，希望能督促我，让我坚持做博客记录~&lt;/li&gt;
  &lt;li&gt;这里将记录我的心情，学习记录，还会更新一些有趣的东西~&lt;/li&gt;
  &lt;li&gt;05 Mar 2017&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">今天，我的博客开通了 我的第一篇文章 今天再一次使用了jekyll模版, 上一次使用还是两年前~ 由于当时有别的东西吸引了我的注意，所以并没有传承写博客的优良传统。 这次再次启动jekyll，希望能督促我，让我坚持做博客记录~ 这里将记录我的心情，学习记录，还会更新一些有趣的东西~ 05 Mar 2017</summary></entry></feed>